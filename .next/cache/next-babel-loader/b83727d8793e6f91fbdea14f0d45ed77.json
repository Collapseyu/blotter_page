{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Edit } from '@/components/svg';\nimport Popover from '@/components/popover';\nimport { concat } from '@/utils/component';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './input.less';\nexport function TransfromOptions(options) {\n  return options.map(opt => typeof opt === 'string' ? {\n    key: opt,\n    value: opt\n  } : opt);\n}\nexport default function Input(props) {\n  const {\n    prefix,\n    suffix,\n    defaultValue,\n    value,\n    placeholder = '',\n    size = 'middle',\n    label = '',\n    autoFocus = false,\n    lablePlacement = 'left',\n    options = [],\n    selectTrigger = ['click'],\n    disabled = false,\n    editable = true,\n    onChange = () => {},\n    onSelect = () => {},\n    getValueCallback = () => {},\n    setValueCallback = () => {},\n    getSelectShow = () => {},\n    setSelectShow = () => {},\n    onEnterPressed = () => {},\n    onBlur,\n    hint,\n    type,\n    style,\n    className,\n    transform = false\n  } = props;\n  const [state, setState] = React.useState(!!defaultValue ? defaultValue : '');\n  const nowValue = typeof value === 'undefined' ? state : value;\n  const opts = React.useMemo(() => TransfromOptions(options), [options]);\n  React.useEffect(() => getValueCallback(() => nowValue), [nowValue, getValueCallback]);\n  React.useEffect(() => setValueCallback(value => setState(value)), [setState, setValueCallback]); //   const [show, setShow] = React.useState(false);\n  //   const click = React.useMemo(() => selectTrigger.indexOf('click') !== -1, [selectTrigger]);\n  //   const hover = React.useMemo(() => selectTrigger.indexOf('hover') !== -1, [selectTrigger]);\n  //   React.useEffect(() => setSelectShow(setShow), [setSelectShow, setShow]);\n  //   React.useEffect(() => getSelectShow(() => show), [getSelectShow, show]);\n\n  const [showInput, setShowInput] = React.useState(false);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size], styles[lablePlacement]),\n    style: style,\n    onBlur: () => {\n      if (transform) setShowInput(false);\n      if (!!onBlur) onBlur();\n    },\n    onClick: () => {\n      if (transform) setShowInput(true);\n    }\n  }, !transform || transform && showInput ? __jsx(React.Fragment, null, !!label ? __jsx(\"div\", {\n    className: concat(styles.label)\n  }, label) : null, __jsx(\"div\", {\n    className: concat(styles.inner, ...(disabled ? ['disabled'] : []))\n  }, __jsx(\"div\", {\n    className: concat(styles.input, shadowStyles.neumorphism_inset)\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, __jsx(Popover, {\n    card: true,\n    arrow: false,\n    placement: \"bottom\",\n    trigger: selectTrigger,\n    component: __jsx(\"div\", {\n      className: styles.select\n    }, __jsx(\"ul\", {\n      className: shadowStyles.neumorphism //   style={\n      //     show\n      //       ? { opacity: 1, visibility: 'visible' }\n      //       : { opacity: 0, visibility: 'hidden' }\n      //   }\n      //   onMouseEnter={() => setShow(true)}\n      //   onMouseLeave={() => setShow(false)}\n\n    }, opts.map((o, idx) => __jsx(\"li\", {\n      key: idx,\n      onClick: () => {\n        if (!disabled) {\n          onSelect(o.key, o.value); //   setShow(false);\n        }\n      }\n    }, o.key))))\n  }, __jsx(\"input\", {\n    value: nowValue,\n    onChange: e => {\n      const value = e.target.value;\n      setState(value);\n      onChange(value);\n    },\n    placeholder: placeholder,\n    type: type,\n    style: {\n      paddingLeft: !!prefix ? '2em' : 0,\n      paddingRight: !!suffix ? '2em' : 0\n    } //   onClick={() => {\n    //     if (click) setShow(true);\n    //   }}\n    //   onMouseEnter={() => {\n    //     if (hover) setShow(true);\n    //   }}\n    //   onMouseLeave={() => setShow(false)}\n    ,\n    readOnly: !editable,\n    onKeyUp: e => {\n      if (e.keyCode == 13 && !!onEnterPressed) onEnterPressed();\n    },\n    autoFocus: autoFocus || transform\n  })), !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null)), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null) : __jsx(\"div\", {\n    className: styles.transform\n  }, __jsx(\"span\", {\n    className: styles.transform_value\n  }, value), __jsx(\"span\", {\n    className: styles.transform_icon\n  }, __jsx(Edit, null))));\n}","map":null,"metadata":{},"sourceType":"module"}