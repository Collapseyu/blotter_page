{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport { Left } from '@/components/svg';\nimport Button from '@/components/button';\nimport { concat } from '@/utils/component';\nimport { Context } from '@/utils/global';\nimport styles from './anchor.less';\nimport shadowStyles from '@/styles/shadow.less';\nexport default function Anchor(props) {\n  var content = props.content,\n      className = props.className,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 10 : _props$indent,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 275 : _props$width,\n      _props$suffixAnchors = props.suffixAnchors,\n      suffixAnchor = _props$suffixAnchors === void 0 ? [] : _props$suffixAnchors,\n      restProps = _objectWithoutProperties(props, [\"content\", \"className\", \"indent\", \"width\", \"suffixAnchors\"]);\n\n  var context = React.useContext(Context);\n  var anchors = React.useMemo(function () {\n    return findAnchors(content).concat(suffixAnchor);\n  }, [content, suffixAnchor]);\n\n  var _React$useState = React.useState(context.big_screen),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      show = _React$useState2[0],\n      setShow = _React$useState2[1];\n\n  return __jsx(\"div\", _extends({}, restProps, {\n    className: concat(styles.anchor, show ? styles.show : '', className)\n  }), __jsx(Button, {\n    neumorphism: true,\n    className: concat(styles.button),\n    icon: __jsx(Left, {\n      className: styles.icon\n    }),\n    onClick: function onClick() {\n      return setShow(!show);\n    }\n  }), __jsx(Flex, {\n    direction: \"TB\",\n    subAxis: \"flex-start\",\n    wrap: false,\n    className: concat(styles.links, shadowStyles.neumorphism)\n  }, anchors.map(function (item) {\n    return __jsx(\"a\", {\n      key: item.id,\n      href: item.id,\n      style: {\n        paddingLeft: (item.level - 1) * indent\n      },\n      title: item.name\n    }, item.name);\n  })));\n}\nexport function findAnchors(html) {\n  var re = new RegExp(\"<h([1-6]) id=\\\"(.*)\\\">(.*)</h\\\\1>\", 'g');\n  var result_list = [];\n\n  do {\n    var result = re.exec(html);\n\n    if (result !== null) {\n      result_list.push({\n        id: \"#\".concat(result[2]),\n        name: result[3],\n        level: parseInt(result[1])\n      });\n    }\n  } while (result);\n\n  return result_list;\n}","map":null,"metadata":{},"sourceType":"module"}