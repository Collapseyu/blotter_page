{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Edit } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport { waitUntil } from '@/utils/debounce';\nimport randomString from '@/utils/random';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './textarea.less';\nexport default function TextArea(props) {\n  const {\n    defaultValue,\n    value,\n    placeholder = '',\n    size = 'middle',\n    label = '',\n    autoFocus = false,\n    lablePlacement = 'top',\n    rows,\n    debounce = 200,\n    disabled = false,\n    editable = true,\n    onChange = () => {},\n    getValueCallback = () => {},\n    setValueCallback = () => {},\n    onBlur,\n    hint,\n    style,\n    className,\n    transform = false\n  } = props;\n  const ref = React.useRef();\n  const key = React.useMemo(() => randomString(), []);\n  React.useEffect(() => getValueCallback(() => ref.current.value), [ref, getValueCallback]);\n  React.useEffect(() => setValueCallback(value => ref.current.value = value), [ref, setValueCallback]);\n  const [showInput, setShowInput] = React.useState(false);\n  React.useEffect(() => {\n    if (!!ref.current && !!value) ref.current.value = value;\n  }, [value, showInput]);\n  const onInputChange = React.useCallback(e => {\n    const value = e.target.value;\n\n    const cb = () => {\n      // setState(value);\n      onChange(value);\n    };\n\n    if (debounce > 0) waitUntil(key, cb, debounce);else cb();\n  }, [debounce, onChange]);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size], styles[lablePlacement]),\n    style: style,\n    onBlur: () => {\n      if (transform) setShowInput(false);\n      if (!!onBlur) onBlur();\n    },\n    onClick: () => {\n      if (transform) setShowInput(true);\n    }\n  }, !transform || transform && showInput ? __jsx(React.Fragment, null, !!label ? __jsx(\"div\", {\n    className: styles.label\n  }, label) : null, __jsx(\"div\", {\n    className: concat(styles.inner, ...(disabled ? ['disabled'] : []))\n  }, __jsx(\"div\", {\n    className: concat(styles.textarea, shadowStyles.neumorphism_inset)\n  }, __jsx(\"textarea\", {\n    ref: ref,\n    defaultValue: defaultValue,\n    onChange: onInputChange,\n    placeholder: placeholder,\n    readOnly: !editable,\n    autoFocus: autoFocus,\n    rows: rows\n  })), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null)) : __jsx(\"div\", {\n    className: styles.transform\n  }, __jsx(\"span\", {\n    className: styles.transform_value\n  }, value), __jsx(\"span\", {\n    className: styles.transform_icon\n  }, __jsx(Edit, null))));\n}","map":null,"metadata":{},"sourceType":"module"}