{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Edit } from '@/components/svg';\nimport Popover from '@/components/popover';\nimport { concat } from '@/utils/component';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './input.less';\nexport function TransfromOptions(options) {\n  return options.map(function (opt) {\n    return typeof opt === 'string' ? {\n      key: opt,\n      value: opt\n    } : opt;\n  });\n}\nexport default function Input(props) {\n  var prefix = props.prefix,\n      suffix = props.suffix,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'middle' : _props$size,\n      _props$label = props.label,\n      label = _props$label === void 0 ? '' : _props$label,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$lablePlacement = props.lablePlacement,\n      lablePlacement = _props$lablePlacement === void 0 ? 'left' : _props$lablePlacement,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$selectTrigger = props.selectTrigger,\n      selectTrigger = _props$selectTrigger === void 0 ? ['click'] : _props$selectTrigger,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$onChange = props.onChange,\n      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? function () {} : _props$onSelect,\n      _props$getValueCallba = props.getValueCallback,\n      getValueCallback = _props$getValueCallba === void 0 ? function () {} : _props$getValueCallba,\n      _props$setValueCallba = props.setValueCallback,\n      setValueCallback = _props$setValueCallba === void 0 ? function () {} : _props$setValueCallba,\n      _props$getSelectShow = props.getSelectShow,\n      getSelectShow = _props$getSelectShow === void 0 ? function () {} : _props$getSelectShow,\n      _props$setSelectShow = props.setSelectShow,\n      setSelectShow = _props$setSelectShow === void 0 ? function () {} : _props$setSelectShow,\n      _props$onEnterPressed = props.onEnterPressed,\n      onEnterPressed = _props$onEnterPressed === void 0 ? function () {} : _props$onEnterPressed,\n      _onBlur = props.onBlur,\n      hint = props.hint,\n      type = props.type,\n      style = props.style,\n      className = props.className,\n      _props$transform = props.transform,\n      transform = _props$transform === void 0 ? false : _props$transform;\n\n  var _React$useState = React.useState(!!defaultValue ? defaultValue : ''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var nowValue = typeof value === 'undefined' ? state : value;\n  var opts = React.useMemo(function () {\n    return TransfromOptions(options);\n  }, [options]);\n  React.useEffect(function () {\n    return getValueCallback(function () {\n      return nowValue;\n    });\n  }, [nowValue, getValueCallback]);\n  React.useEffect(function () {\n    return setValueCallback(function (value) {\n      return setState(value);\n    });\n  }, [setState, setValueCallback]); //   const [show, setShow] = React.useState(false);\n  //   const click = React.useMemo(() => selectTrigger.indexOf('click') !== -1, [selectTrigger]);\n  //   const hover = React.useMemo(() => selectTrigger.indexOf('hover') !== -1, [selectTrigger]);\n  //   React.useEffect(() => setSelectShow(setShow), [setSelectShow, setShow]);\n  //   React.useEffect(() => getSelectShow(() => show), [getSelectShow, show]);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      showInput = _React$useState4[0],\n      setShowInput = _React$useState4[1];\n\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size], styles[lablePlacement]),\n    style: style,\n    onBlur: function onBlur() {\n      if (transform) setShowInput(false);\n      if (!!_onBlur) _onBlur();\n    },\n    onClick: function onClick() {\n      if (transform) setShowInput(true);\n    }\n  }, !transform || transform && showInput ? __jsx(React.Fragment, null, !!label ? __jsx(\"div\", {\n    className: concat(styles.label)\n  }, label) : null, __jsx(\"div\", {\n    className: concat.apply(void 0, [styles.inner].concat(_toConsumableArray(disabled ? ['disabled'] : [])))\n  }, __jsx(\"div\", {\n    className: concat(styles.input, shadowStyles.neumorphism_inset)\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, __jsx(Popover, {\n    card: true,\n    arrow: false,\n    placement: \"bottom\",\n    trigger: selectTrigger,\n    component: __jsx(\"div\", {\n      className: styles.select\n    }, __jsx(\"ul\", {\n      className: shadowStyles.neumorphism //   style={\n      //     show\n      //       ? { opacity: 1, visibility: 'visible' }\n      //       : { opacity: 0, visibility: 'hidden' }\n      //   }\n      //   onMouseEnter={() => setShow(true)}\n      //   onMouseLeave={() => setShow(false)}\n\n    }, opts.map(function (o, idx) {\n      return __jsx(\"li\", {\n        key: idx,\n        onClick: function onClick() {\n          if (!disabled) {\n            onSelect(o.key, o.value); //   setShow(false);\n          }\n        }\n      }, o.key);\n    })))\n  }, __jsx(\"input\", {\n    value: nowValue,\n    onChange: function onChange(e) {\n      var value = e.target.value;\n      setState(value);\n\n      _onChange(value);\n    },\n    placeholder: placeholder,\n    type: type,\n    style: {\n      paddingLeft: !!prefix ? '2em' : 0,\n      paddingRight: !!suffix ? '2em' : 0\n    } //   onClick={() => {\n    //     if (click) setShow(true);\n    //   }}\n    //   onMouseEnter={() => {\n    //     if (hover) setShow(true);\n    //   }}\n    //   onMouseLeave={() => setShow(false)}\n    ,\n    readOnly: !editable,\n    onKeyUp: function onKeyUp(e) {\n      if (e.keyCode == 13 && !!onEnterPressed) onEnterPressed();\n    },\n    autoFocus: autoFocus || transform\n  })), !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null)), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null) : __jsx(\"div\", {\n    className: styles.transform\n  }, __jsx(\"span\", {\n    className: styles.transform_value\n  }, value), __jsx(\"span\", {\n    className: styles.transform_icon\n  }, __jsx(Edit, null))));\n}","map":null,"metadata":{},"sourceType":"module"}