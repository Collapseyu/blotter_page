{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport { Left } from '@/components/svg';\nimport Button from '@/components/button';\nimport { concat } from '@/utils/component';\nimport { Context } from '@/utils/global';\nimport styles from './anchor.less';\nimport shadowStyles from '@/styles/shadow.less';\nexport default function Anchor(props) {\n  const {\n    content,\n    className,\n    indent = 10,\n    width = 275,\n    suffixAnchors: suffixAnchor = [],\n    container = document\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"content\", \"className\", \"indent\", \"width\", \"suffixAnchors\", \"container\"]);\n\n  const ref = React.useRef();\n  const context = React.useContext(Context);\n  const anchors = React.useMemo(() => findAnchors(content).concat(suffixAnchor), [content, suffixAnchor]);\n  const [show, setShow] = React.useState(context.big_screen);\n  const syncScroll = React.useCallback(e => {\n    const target = e.target === document ? document.documentElement : e.target;\n    if (!!ref.current) ref.current.style.top = `${target.scrollTop + 100}px`;\n  }, [ref]);\n  React.useEffect(() => {\n    if (!!container) {\n      container.addEventListener('scroll', syncScroll);\n      return () => container.removeEventListener('scroll', syncScroll);\n    } else if (!!ref.current) {\n      ref.current.style.position = 'fixed';\n      return () => ref.current.style.position = '';\n    }\n  }, [container, ref, syncScroll]);\n  return __jsx(\"div\", _extends({\n    ref: ref\n  }, restProps, {\n    className: concat(styles.anchor, show ? styles.show : '', className)\n  }), __jsx(Button, {\n    neumorphism: true,\n    className: concat(styles.button),\n    icon: __jsx(Left, {\n      className: styles.icon\n    }),\n    onClick: () => setShow(!show)\n  }), __jsx(Flex, {\n    direction: \"TB\",\n    subAxis: \"flex-start\",\n    wrap: false,\n    className: concat(styles.links, shadowStyles.neumorphism)\n  }, anchors.map(item => __jsx(\"a\", {\n    key: item.id,\n    href: item.id,\n    style: {\n      paddingLeft: (item.level - 1) * indent\n    },\n    title: item.name\n  }, item.name))));\n}\nexport function findAnchors(html) {\n  var re = new RegExp(`<h([1-6]) id=\"(.*)\">(.*)</h\\\\1>`, 'g');\n  var result_list = [];\n\n  do {\n    var result = re.exec(html);\n\n    if (result !== null) {\n      result_list.push({\n        id: `#${result[2]}`,\n        name: result[3],\n        level: parseInt(result[1])\n      });\n    }\n  } while (result);\n\n  return result_list;\n}","map":null,"metadata":{},"sourceType":"module"}