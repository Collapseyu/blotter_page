{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport styles from './button.less';\nimport shadowStyles from '@/styles/shadow.less';\n\nfunction parseProps(props) {\n  var _props$size = props.size,\n      size = _props$size === void 0 ? 'middle' : _props$size,\n      icon = props.icon,\n      _props$circle = props.circle,\n      circle = _props$circle === void 0 ? false : _props$circle,\n      _props$primary = props.primary,\n      primary = _props$primary === void 0 ? false : _props$primary,\n      _props$shadow = props.shadow,\n      shadow = _props$shadow === void 0 ? false : _props$shadow,\n      _props$neumorphism = props.neumorphism,\n      neumorphism = _props$neumorphism === void 0 ? false : _props$neumorphism,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$clicked = props.clicked,\n      clicked = _props$clicked === void 0 ? false : _props$clicked,\n      onClick = props.onClick,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style,\n      className = props.className,\n      children = props.children;\n  var classList = [styles.button, className];\n\n  if (typeof size === 'string') {\n    classList.push(styles[size]);\n  } else {\n    style.fontSize = \"\".concat(size, \"em\");\n    style.width = \"\".concat(size + 1, \"em\");\n    style.height = \"\".concat(size + 1, \"em\");\n  }\n\n  if (!!icon) classList.push(styles.icon);\n  if (circle) classList.push(styles.circle);\n  if (primary) classList.push(styles.primary);\n  if (shadow) classList.push(shadowStyles.shadow);\n  if (neumorphism && !clicked) classList.push(shadowStyles.neumorphism);\n  if (neumorphism && clicked) classList.push(shadowStyles.neumorphism_inset);\n  if (disabled) classList.push('disabled');\n  if ((shadow || neumorphism) && !disabled) classList.push(shadowStyles.clickable);\n  return {\n    classList: classList,\n    style: style,\n    onClick: disabled ? function () {} : onClick,\n    icon: icon,\n    children: children,\n    disabled: disabled\n  };\n}\n\nfunction Button(props, ref) {\n  var _parseProps = parseProps(props),\n      classList = _parseProps.classList,\n      style = _parseProps.style,\n      onClick = _parseProps.onClick,\n      icon = _parseProps.icon,\n      children = _parseProps.children,\n      disabled = _parseProps.disabled;\n\n  return __jsx(\"button\", {\n    className: concat.apply(void 0, _toConsumableArray(classList)),\n    style: style,\n    onClick: onClick,\n    disabled: disabled\n  }, !!icon ? icon : children);\n}\n\nfunction ALink(props, ref) {\n  var _parseProps2 = parseProps(props),\n      classList = _parseProps2.classList,\n      style = _parseProps2.style,\n      onClick = _parseProps2.onClick,\n      icon = _parseProps2.icon,\n      children = _parseProps2.children,\n      disabled = _parseProps2.disabled;\n\n  var href = props.href,\n      target = props.target,\n      rel = props.rel,\n      linkType = props.linkType;\n  return __jsx(\"a\", {\n    ref: ref,\n    className: concat.apply(void 0, _toConsumableArray(classList)),\n    style: style,\n    onClick: onClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type: linkType\n  }, !!icon ? icon : children);\n} // Next.js 的 Link  组件需要子组件可以接收 ref（用于修i该子元素的 href）\n\n\nexport default React.forwardRef(Button);\nexport var A = React.forwardRef(ALink);","map":null,"metadata":{},"sourceType":"module"}