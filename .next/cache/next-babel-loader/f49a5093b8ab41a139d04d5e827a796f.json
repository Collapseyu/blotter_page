{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport styles from './upload.module.scss';\nexport default function Upload(props) {\n  const ref = React.useRef();\n\n  const {\n    className,\n    children,\n    onUpload\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"className\", \"children\", \"onUpload\"]);\n\n  return __jsx(\"div\", _extends({}, restProps, {\n    className: concat(styles.upload, className)\n  }), __jsx(\"input\", {\n    ref: ref,\n    type: \"file\",\n    multiple: true,\n    onChange: e => {\n      if (!!onUpload) onUpload(e.target.files);\n    }\n  }), __jsx(\"div\", {\n    className: styles.children\n  }, children));\n}","map":null,"metadata":{},"sourceType":"module"}