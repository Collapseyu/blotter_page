{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './textarea.less';\nexport default function TextArea(props) {\n  const {\n    defaultValue,\n    value,\n    placeholder = '',\n    size = 'middle',\n    label = '',\n    autoFocus = false,\n    lablePlacement = 'left',\n    rows,\n    disabled = false,\n    editable = true,\n    onChange = () => {},\n    getValueCallback = () => {},\n    setValueCallback = () => {},\n    onBlur,\n    hint,\n    style,\n    className\n  } = props;\n  const ref = React.useRef();\n  React.useEffect(() => getValueCallback(() => ref.current.value), [ref, getValueCallback]);\n  React.useEffect(() => setValueCallback(value => ref.current.value = value), [ref, setValueCallback]);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size]),\n    style: style,\n    onBlur: onBlur\n  }, !!label ? __jsx(\"div\", {\n    className: styles.label\n  }, label) : null, __jsx(\"div\", {\n    className: concat(styles.inner, ...(disabled ? ['disabled'] : []))\n  }, __jsx(\"div\", {\n    className: concat(styles.textarea, shadowStyles.neumorphism_inset)\n  }, __jsx(\"textarea\", {\n    ref: ref,\n    defaultValue: !!value ? undefined : defaultValue,\n    value: value,\n    onChange: e => onChange(e.target.value),\n    placeholder: placeholder,\n    readOnly: !editable,\n    autoFocus: autoFocus,\n    rows: rows\n  })), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null));\n}","map":null,"metadata":{},"sourceType":"module"}