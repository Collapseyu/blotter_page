{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport Button from '@/components/button';\nimport { Dots, Pre, Next } from '@/components/svg';\nimport Input from '@/components/input';\n\nfunction defaultRender(current, pageNumber, size, page, onChange) {\n  switch (page) {\n    case -2:\n      {\n        return __jsx(Button, {\n          size: \"small\",\n          neumorphism: true,\n          disabled: current - 1 < 1,\n          onClick: () => onChange(current - 1, size),\n          icon: __jsx(Pre, null)\n        });\n      }\n\n    case -3:\n      {\n        return __jsx(Button, {\n          size: \"small\",\n          neumorphism: true,\n          disabled: current + 1 > pageNumber,\n          onClick: () => onChange(current + 1, size),\n          icon: __jsx(Next, null)\n        });\n      }\n\n    case -1:\n      {\n        return __jsx(Dots, null);\n      }\n\n    default:\n      {\n        return __jsx(Button, {\n          size: \"small\",\n          neumorphism: true,\n          disabled: current === page,\n          clicked: current === page,\n          onClick: () => onChange(page, size)\n        }, page);\n      }\n  }\n}\n\nexport default function Pagination(props) {\n  const {\n    page = 1,\n    size = 10,\n    total = 0,\n    range = 3,\n    sizeSelect = [],\n    render = defaultRender,\n    onChange = () => {}\n  } = props;\n  const pageNumber = React.useMemo(() => Math.ceil(total / size), [total, size]);\n  var pages = Array(range * 2 + 1).fill(0).map((_, idx) => idx + page - range).filter(p => p >= 1 && p <= pageNumber);\n\n  if (pages.length > 0) {\n    if (pages[0] === 2) pages.unshift(1);else if (pages[0] > 2) pages.unshift(1, -1);\n    if (pages[pages.length - 1] === pageNumber - 1) pages.push(pageNumber);else if (pages[pages.length - 1] < pageNumber - 1) pages.push(-1, pageNumber);\n  }\n\n  pages.unshift(-2);\n  pages.push(-3);\n  var items = pages.map(p => __jsx(Flex.Item, {\n    key: p\n  }, render(page, pageNumber, size, p, onChange)));\n  if (!!sizeSelect && sizeSelect.length > 1) items.push(__jsx(Input, {\n    key: \"size\",\n    editable: false,\n    value: `${size}个/页`,\n    options: sizeSelect.map(s => ({\n      key: `${s}个/页`,\n      value: s\n    })),\n    onSelect: (_, v) => onChange(page, v)\n  }));\n  return __jsx(Flex, {\n    mainAxis: \"flex-end\",\n    subSize: \"middle\"\n  }, items);\n}","map":null,"metadata":{},"sourceType":"module"}