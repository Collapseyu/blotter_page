{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as qiniu from 'qiniu-js';\nimport Card from '@/components/card';\nimport { Flex } from '@/components/container';\nimport Tabs from '@/components/tabs';\nimport Popover, { Modal } from '@/components/popover';\nimport { message } from '@/components/notification';\nimport Image from '@/components/image';\nimport { Loading, Save, Delete, Sync } from '@/components/svg';\nimport Button from '@/components/button';\nimport Input, { Upload as U } from '@/components/input';\nimport { qiniu_get_buckets, qiniu_get_images, qiniu_get_token, qiniu_delete_image, qiniu_rename_image } from '@/utils/api';\nimport { waitUntil } from '@/utils/debounce';\nimport ShowNotification from '@/utils/notification';\nconst img_file_type = ['psd', 'jpg', 'jpeg', 'png', 'gif', 'webp', 'tiff', 'bmp'];\n\nfunction generateThumbnail(img) {\n  if (img_file_type.indexOf(img.split('.').slice(-1)[0]) != -1) return `${img}?imageView2/0/w/128/h/128/interlace/1/q/50`;else img;\n}\n\nfunction BucketSelector(props) {\n  const {\n    bucket,\n    prefix,\n    onChange = () => {},\n    imgRef\n  } = props;\n  const [prefixList, setPrefixList] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [buckets, setBuckets] = React.useState([]);\n\n  function initial() {\n    setLoading(true);\n    qiniu_get_buckets().then(r => {\n      setBuckets(r.buckets);\n      setPrefixList(Array.from(new Set([{\n        key: '无前缀',\n        value: ''\n      }].concat(r.prefix))));\n      if (bucket == '' && r.buckets.length != 0) onChange(r.buckets[0], '');\n    }).catch(console.error).finally(() => setLoading(false));\n  }\n\n  React.useEffect(initial, []);\n  return /*#__PURE__*/_jsxs(Flex, {\n    mainAxis: 'flex-start',\n    children: [/*#__PURE__*/_jsx(Input, {\n      label: \"\\u5B58\\u50A8\\u7A7A\\u95F4\",\n      value: bucket,\n      onSelect: (k, v) => onChange(v, prefix),\n      options: buckets\n    }), /*#__PURE__*/_jsx(Button, {\n      onClick: initial,\n      icon: loading ? /*#__PURE__*/_jsx(Loading, {}) : /*#__PURE__*/_jsx(Sync, {})\n    }), /*#__PURE__*/_jsx(Input, {\n      value: prefix,\n      onChange: p => {\n        waitUntil('image_prefix', () => {\n          if (p !== '') onChange(bucket, p);\n        }, 500);\n      },\n      onSelect: (k, v) => onChange(bucket, v),\n      suffix: loading ? /*#__PURE__*/_jsx(Loading, {}) : undefined,\n      options: prefixList\n    }), /*#__PURE__*/_jsx(Button, {\n      neumorphism: true,\n      onClick: () => {\n        if (!!imgRef && !!imgRef.current) imgRef.current.refresh();\n      },\n      children: \"\\u5237\\u65B0\\u56FE\\u7247\"\n    })]\n  });\n}\n\nfunction Upload(props) {\n  const {\n    bucket,\n    prefix\n  } = props;\n\n  const upload = async file => {\n    const token = (await qiniu_get_token(bucket)).token;\n    const filename = !!prefix ? `${prefix}/${file.name}` : file.name;\n    const observable = qiniu.upload(file, filename, token, {}, {});\n    const subscription = observable.subscribe({\n      next(res) {\n        console.log(res);\n      },\n\n      error(err) {\n        message({\n          alertType: 'error',\n          title: `上传发生错误`,\n          content: `${filename}\\n${err}`\n        });\n        console.error(err);\n      },\n\n      complete(res) {\n        message({\n          alertType: 'success',\n          title: `上传成功`,\n          content: `${filename}`\n        });\n      }\n\n    });\n  };\n\n  return /*#__PURE__*/_jsx(U, {\n    onUpload: files => Object.values(files).map(upload),\n    children: /*#__PURE__*/_jsx(\"p\", {\n      children: \"\\u70B9\\u51FB\\u6216\\u5C06\\u6587\\u4EF6\\u62D6\\u62FD\\u5230\\u6B64\\u5904\\u4E0A\\u4F20\"\n    })\n  });\n}\n\nconst ImageList = /*#__PURE__*/React.forwardRef(imageList);\n\nfunction imageList(props, ref) {\n  // props\n  const {\n    bucket,\n    prefix,\n    group_number = 10\n  } = props; // state\n\n  const [marker, setMarker] = React.useState('');\n  const [hasNext, setHasNext] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [images, setImages] = React.useReducer((images, action) => {\n    const {\n      method\n    } = action;\n\n    switch (method) {\n      case 'initial':\n        {\n          const {\n            value = []\n          } = action;\n          return value.map(img => _objectSpread(_objectSpread({}, img), {}, {\n            new_key: img.key\n          }));\n        }\n\n      case 'concat':\n        {\n          const {\n            value = []\n          } = action;\n          return images.concat(value.map(img => _objectSpread(_objectSpread({}, img), {}, {\n            new_key: img.key\n          })));\n        }\n\n      case 'update':\n        {\n          const {\n            index = 0,\n            key = images[index].new_key\n          } = action;\n          return [...images.slice(0, index), _objectSpread(_objectSpread({}, images[index]), {}, {\n            new_key: key\n          }), ...images.slice(index + 1)];\n        }\n\n      default:\n        {\n          throw new Error();\n        }\n    }\n  }, []); // ref\n\n  const [id, setID] = React.useState(0);\n  const idRef = React.useRef(id);\n  idRef.current = id;\n  const getData = React.useCallback((b, p, m) => {\n    if (!b) return;\n    setLoading(true);\n    var thisID = id + 1;\n    setID(thisID); // setID((i) => (idRef.current = thisID = i + 1));\n\n    qiniu_get_images(b, p, m, group_number).then(r => {\n      if (idRef.current === thisID) {\n        setImages({\n          method: !!m ? 'concat' : 'initial',\n          value: r.files\n        });\n        setMarker(r.marker), setHasNext(r.has_next);\n      }\n    }).catch(console.error).finally(() => setLoading(false));\n  }, [id, group_number]);\n  const initial = React.useCallback(() => getData(bucket, prefix, ''), [bucket, prefix]);\n  React.useImperativeHandle(ref, () => ({\n    refresh: initial\n  }), [bucket, prefix]); // init data\n\n  React.useEffect(() => {\n    setImages({\n      method: 'initial'\n    }), setMarker(''), setHasNext(false);\n    initial();\n  }, [bucket, prefix]);\n  return /*#__PURE__*/_jsxs(Flex, {\n    direction: \"TB\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsx(Flex, {\n      mainAxis: \"flex-start\",\n      children: images.map((image, idx) => {\n        return /*#__PURE__*/_jsx(Card, {\n          style: {\n            width: 150\n          },\n          children: /*#__PURE__*/_jsxs(Flex, {\n            direction: \"TB\",\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsx(Image, {\n              src: image.link,\n              thumbnail: generateThumbnail(image.link),\n              title: image.link,\n              clickable: true,\n              width: \"100%\",\n              height: \"100px\"\n            }), /*#__PURE__*/_jsx(Input, {\n              value: image.new_key,\n              transform: true,\n              onChange: v => {\n                setImages({\n                  method: 'update',\n                  index: idx,\n                  key: v\n                });\n              },\n              style: {\n                minWidth: '100%'\n              }\n            }), /*#__PURE__*/_jsxs(Flex, {\n              children: [/*#__PURE__*/_jsx(Button, {\n                icon: /*#__PURE__*/_jsx(Save, {}),\n                onClick: async () => {\n                  if (ShowNotification(await qiniu_rename_image(bucket, image.key, image.new_key))) initial();\n                }\n              }), /*#__PURE__*/_jsx(Popover, {\n                trigger: ['click'],\n                card: true,\n                shadow: true,\n                component: /*#__PURE__*/_jsx(Card, {\n                  children: /*#__PURE__*/_jsxs(Flex, {\n                    children: [\"\\u786E\\u5B9A\\u5220\\u9664\\uFF1F\", /*#__PURE__*/_jsx(Button, {\n                      danger: true,\n                      primary: true,\n                      neumorphism: true,\n                      size: \"small\",\n                      onClick: async () => {\n                        if (ShowNotification(await qiniu_delete_image(bucket, image.key))) initial();\n                      },\n                      children: \"\\u5220\\u9664\"\n                    })]\n                  })\n                }),\n                children: /*#__PURE__*/_jsx(Button, {\n                  danger: true,\n                  style: {\n                    background: 'transparent'\n                  },\n                  icon: /*#__PURE__*/_jsx(Delete, {})\n                })\n              })]\n            })]\n          })\n        }, image.new_key);\n      })\n    }), /*#__PURE__*/_jsx(Flex.Item, {\n      style: {\n        width: 'auto'\n      },\n      children: /*#__PURE__*/_jsx(Button, {\n        neumorphism: true,\n        onClick: () => getData(bucket, prefix, marker),\n        disabled: !hasNext,\n        loading: loading,\n        children: \"\\u83B7\\u53D6\\u66F4\\u591A\"\n      })\n    })]\n  });\n}\n\nfunction Qiniu(props) {\n  const {\n    defaultTab = 'upload',\n    group_number = 10\n  } = props;\n  const [bucket, setBucket] = React.useState('');\n  const [prefix, setPrefix] = React.useState('');\n  const ref = React.useRef();\n  const setState = React.useCallback((b, p) => {\n    if (b !== bucket) setBucket(b);\n    if (p !== prefix) setPrefix(p);\n  }, [bucket, prefix]);\n  return /*#__PURE__*/_jsxs(Flex, {\n    direction: \"TB\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsx(BucketSelector, {\n      bucket: bucket,\n      prefix: prefix,\n      onChange: setState,\n      imgRef: ref\n    }), /*#__PURE__*/_jsxs(Tabs, {\n      defaultSelected: defaultTab === 'list' ? '图片列表' : '上传图片',\n      keepInDOM: true,\n      children: [/*#__PURE__*/_jsx(Tabs.Item, {\n        name: \"\\u4E0A\\u4F20\\u56FE\\u7247\",\n        children: /*#__PURE__*/_jsx(Upload, {\n          bucket: bucket,\n          prefix: prefix\n        })\n      }), /*#__PURE__*/_jsx(Tabs.Item, {\n        name: \"\\u56FE\\u7247\\u5217\\u8868\",\n        children: /*#__PURE__*/_jsx(ImageList, {\n          ref: ref,\n          bucket: bucket,\n          prefix: prefix,\n          group_number: group_number\n        })\n      })]\n    })]\n  });\n}\n\nexport function QiniuModal(props) {\n  const {\n    show,\n    onClose\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"show\", \"onClose\"]);\n\n  return /*#__PURE__*/_jsx(Modal, {\n    show: show,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsx(Card, {\n      children: /*#__PURE__*/_jsx(Qiniu, _objectSpread({}, restProps))\n    })\n  });\n}\nexport default Qiniu;\nexport { BucketSelector, Upload, ImageList };","map":null,"metadata":{},"sourceType":"module"}