{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Edit } from '@/components/svg';\nimport Popover from '@/components/popover';\nimport { concat } from '@/utils/component';\nimport { waitUntil } from '@/utils/debounce';\nimport randomString from '@/utils/random';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './input.less';\nexport function TransfromOptions(options) {\n  return options.map(opt => typeof opt === 'string' ? {\n    key: opt,\n    value: opt\n  } : opt);\n}\nexport default function Input(props) {\n  const {\n    prefix,\n    suffix,\n    defaultValue,\n    value,\n    placeholder = '',\n    size = 'middle',\n    label = '',\n    autoFocus = false,\n    lablePlacement = 'left',\n    options = [],\n    selectTrigger = ['click'],\n    disabled = false,\n    editable = true,\n    onChange = () => {},\n    onSelect = () => {},\n    getValueCallback = () => {},\n    setValueCallback = () => {},\n    onEnterPressed = () => {},\n    onBlur,\n    hint,\n    type,\n    style,\n    className,\n    transform = false,\n    debounce = 200,\n    getOffset\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"prefix\", \"suffix\", \"defaultValue\", \"value\", \"placeholder\", \"size\", \"label\", \"autoFocus\", \"lablePlacement\", \"options\", \"selectTrigger\", \"disabled\", \"editable\", \"onChange\", \"onSelect\", \"getValueCallback\", \"setValueCallback\", \"onEnterPressed\", \"onBlur\", \"hint\", \"type\", \"style\", \"className\", \"transform\", \"debounce\", \"getOffset\"]);\n\n  const ref = React.useRef();\n  const key = React.useMemo(() => randomString(), []);\n  const opts = React.useMemo(() => TransfromOptions(options), [options]);\n  React.useEffect(() => getValueCallback(() => !!ref ? ref.current.value : ''), [ref, getValueCallback]);\n  React.useEffect(() => setValueCallback(value => {\n    if (!!ref && !!ref.current && typeof value === 'string') ref.current.value = value;\n  }), [ref, setValueCallback]);\n  const [showInput, setShowInput] = React.useState(false);\n  React.useEffect(() => {\n    if (!!ref && !!ref.current && typeof value === 'string') ref.current.value = value;\n  }, [ref, value, showInput]);\n  const onInputChange = React.useCallback(e => {\n    const value = e.target.value;\n\n    const cb = () => onChange(value);\n\n    if (debounce > 0) waitUntil(key, cb, debounce);else cb();\n  }, [debounce, onChange]);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size]),\n    style: style,\n    onBlur: () => {\n      if (transform) setShowInput(false);\n      if (!!onBlur) onBlur();\n    },\n    onClick: () => {\n      if (transform) setShowInput(true);\n    }\n  }, !transform || transform && showInput ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: concat(styles.inner, styles[lablePlacement], ...(disabled ? ['disabled'] : []))\n  }, !!label ? __jsx(\"div\", {\n    className: concat(styles.label)\n  }, label) : null, __jsx(\"div\", {\n    className: concat(styles.input, shadowStyles.neumorphism_inset)\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, __jsx(Popover, {\n    getOffset: getOffset,\n    card: true,\n    arrow: false,\n    placement: \"bottom\",\n    trigger: selectTrigger,\n    style: {\n      width: '100%'\n    },\n    component: __jsx(\"div\", {\n      className: styles.select\n    }, __jsx(\"ul\", {\n      className: shadowStyles.neumorphism\n    }, opts.map((o, idx) => __jsx(\"li\", {\n      key: idx,\n      onClick: () => {\n        if (!disabled) {\n          onSelect(o.key, o.value);\n        }\n      }\n    }, o.key))))\n  }, __jsx(\"input\", _extends({}, restProps, {\n    ref: ref,\n    defaultValue: defaultValue,\n    onChange: onInputChange,\n    placeholder: placeholder,\n    type: type,\n    readOnly: !editable,\n    onKeyUp: e => {\n      if (e.keyCode == 13 && !!onEnterPressed) onEnterPressed();\n    },\n    autoFocus: autoFocus || transform\n  }))), !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null)), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null) : __jsx(\"div\", {\n    className: styles.transform\n  }, __jsx(\"span\", {\n    className: styles.transform_value\n  }, value), __jsx(\"span\", {\n    className: styles.transform_icon\n  }, __jsx(Edit, null))));\n}","map":null,"metadata":{},"sourceType":"module"}