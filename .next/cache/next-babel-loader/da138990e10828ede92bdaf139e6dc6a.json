{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './input.less';\nexport default function Input(props) {\n  var prefix = props.prefix,\n      suffix = props.suffix,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'middle' : _props$size,\n      _props$label = props.label,\n      label = _props$label === void 0 ? '' : _props$label,\n      _props$lablePlacement = props.lablePlacement,\n      lablePlacement = _props$lablePlacement === void 0 ? 'left' : _props$lablePlacement,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$selectTrigger = props.selectTrigger,\n      selectTrigger = _props$selectTrigger === void 0 ? ['click'] : _props$selectTrigger,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$onChange = props.onChange,\n      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? function () {} : _props$onSelect,\n      _props$getValueCallba = props.getValueCallback,\n      getValueCallback = _props$getValueCallba === void 0 ? function () {} : _props$getValueCallba,\n      _props$setValueCallba = props.setValueCallback,\n      setValueCallback = _props$setValueCallba === void 0 ? function () {} : _props$setValueCallba,\n      _props$getSelectShow = props.getSelectShow,\n      getSelectShow = _props$getSelectShow === void 0 ? function () {} : _props$getSelectShow,\n      _props$setSelectShow = props.setSelectShow,\n      setSelectShow = _props$setSelectShow === void 0 ? function () {} : _props$setSelectShow,\n      style = props.style,\n      className = props.className;\n\n  var ref = React.useRef();\n  React.useEffect(function () {\n    return getValueCallback(function () {\n      return ref.current.value;\n    });\n  }, [ref, getValueCallback]);\n  React.useEffect(function () {\n    return setValueCallback(function (value) {\n      return ref.current.value = value;\n    });\n  }, [ref, setValueCallback]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      show = _React$useState2[0],\n      setShow = _React$useState2[1];\n\n  var click = React.useMemo(function () {\n    return selectTrigger.indexOf('click') !== -1;\n  }, [selectTrigger]);\n  var hover = React.useMemo(function () {\n    return selectTrigger.indexOf('hover') !== -1;\n  }, [selectTrigger]);\n  React.useEffect(function () {\n    return setSelectShow(setShow);\n  }, [setSelectShow, setShow]);\n  React.useEffect(function () {\n    return getSelectShow(function () {\n      return show;\n    });\n  }, [getSelectShow, show]);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className),\n    style: style\n  }, !!label ? __jsx(\"span\", {\n    className: styles.label\n  }, label) : null, __jsx(\"div\", {\n    className: concat.apply(void 0, [styles.inner].concat(_toConsumableArray(disabled ? ['disabled'] : [])))\n  }, __jsx(\"div\", {\n    className: concat(styles.input, shadowStyles.neumorphism_inset, styles[size])\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, __jsx(\"input\", {\n    ref: ref,\n    defaultValue: !!value ? undefined : defaultValue,\n    value: value,\n    onChange: function onChange(e) {\n      return _onChange(e.target.value);\n    },\n    placeholder: placeholder,\n    style: {\n      paddingLeft: !!prefix ? '2em' : 0,\n      paddingRight: !!suffix ? '2em' : 0\n    },\n    onClick: function onClick() {\n      if (click) setShow(true);\n    },\n    onMouseEnter: function onMouseEnter() {\n      if (hover) setShow(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setShow(false);\n    },\n    readOnly: !editable\n  }), !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null), options.length > 0 ? __jsx(\"div\", {\n    className: styles.select\n  }, __jsx(\"ul\", {\n    className: shadowStyles.neumorphism,\n    style: show ? {\n      opacity: 1,\n      visibility: 'visible'\n    } : {\n      opacity: 0,\n      visibility: 'hidden'\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setShow(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setShow(false);\n    }\n  }, options.map(function (o, idx) {\n    return __jsx(\"li\", {\n      key: idx,\n      onClick: function onClick() {\n        if (!disabled) {\n          onSelect(o.key, o.value);\n          setShow(false);\n        }\n      }\n    }, o.key);\n  }))) : null));\n}","map":null,"metadata":{},"sourceType":"module"}