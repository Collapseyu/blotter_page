{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { concat } from '@/utils/component';\nimport styles from './loading.module.scss';\nexport default function Loading(props) {\n  const {\n    count = 5,\n    loading = true,\n    className,\n    children\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"count\", \"loading\", \"className\", \"children\"]);\n\n  return __jsx(\"div\", _extends({\n    className: concat(styles.wrapper, loading ? styles.onloading : '', className)\n  }, restProps), __jsx(\"div\", {\n    className: styles.loading\n  }, Array(count).fill(0).map((_, idx) => __jsx(\"span\", {\n    key: idx,\n    style: {\n      animationDelay: `${idx * 0.2}s`\n    }\n  }))), children && __jsx(\"div\", {\n    className: styles.inner\n  }, children));\n}","map":null,"metadata":{},"sourceType":"module"}