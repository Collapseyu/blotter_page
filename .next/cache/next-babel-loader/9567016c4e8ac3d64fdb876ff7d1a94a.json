{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { Flex } from '@/components/container';\nimport PostList from '@/components/post_list';\nimport PostSearch from '@/components/post_search';\nimport { Context } from '@/utils/global';\nimport { indexPosts, tagsSearch } from '@/utils/api';\nimport { waitUntil } from '@/utils/debounce';\nimport Card from '@/components/card';\nimport Button from '@/components/button';\n\nclass Index extends React.Component {\n  static async getInitialProps(args) {\n    var data = await indexPosts('', [], 1, 10, [], []);\n    return {\n      posts: data.posts\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", value => {\n      waitUntil('index_search', () => {\n        this.setState({\n          search: value,\n          page: 1\n        }, this.getPosts);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"onPageChange\", (page, size) => {\n      if (typeof size === 'undefined') {\n        size = this.state.size;\n      }\n\n      this.setState({\n        page,\n        size\n      }, this.getPosts);\n    });\n\n    _defineProperty(this, \"getPosts\", async () => {\n      if (this.state.search == '' && this.state.with_tags.length == 0 && this.state.without_tags.length == 0) {\n        this.setState({\n          posts: this.props.posts,\n          total: 0,\n          search: '',\n          callback: undefined,\n          tags: []\n        });\n      } else {\n        this.setState({\n          loading: true\n        });\n        var data = await indexPosts(this.state.search, this.state.search_fields, this.state.page, this.state.size, this.state.with_tags, this.state.without_tags);\n        var tags = [];\n\n        if (this.state.search !== '') {\n          tags = await (await tagsSearch(this.state.search)).tags;\n        }\n\n        this.setState({\n          posts: data.posts,\n          total: data.total,\n          loading: false,\n          callback: this.onPageChange,\n          tags: tags\n        });\n      }\n    });\n\n    this.state = {\n      posts: this.props.posts,\n      total: 0,\n      loading: false,\n      page: 1,\n      size: 10,\n      search: '',\n      search_fields: ['title'],\n      tags: [],\n      with_tags: [],\n      without_tags: []\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `首页|${context.blog_name}`))), __jsx(Flex, {\n      direction: \"TB\",\n      fullWidth: true\n    }, __jsx(Card, {\n      neumorphism: true,\n      style: {\n        lineHeight: '2em'\n      }\n    }, __jsx(PostSearch, {\n      searchWord: this.state.search,\n      onSearchChange: this.onChange,\n      checkedKeys: this.state.search_fields,\n      onCheckChange: search_fields => this.setState({\n        search_fields\n      }),\n      withTags: this.state.with_tags,\n      withoutTags: this.state.without_tags,\n      onTagChange: (type, tags) => this.setState(state => _objectSpread(_objectSpread({}, state), {\n        [type === 'with' ? 'with_tags' : 'without_tags']: tags\n      })),\n      tags: this.state.tags\n    })), __jsx(PostList, {\n      posts: this.state.posts,\n      header: this.state.total == 0 ? undefined : `共 ${this.state.total} 条搜索结果`,\n      loading: this.state.loading,\n      page: this.state.page,\n      size: this.state.size,\n      total: this.state.total,\n      callback: this.state.callback\n    }), __jsx(\"div\", {\n      className: \"textCenter\"\n    }, __jsx(Link, {\n      href: \"/archives?page=2&size=10\"\n    }, __jsx(Button, {\n      neumorphism: true\n    }, \"\\u67E5\\u770B\\u66F4\\u591A\")))));\n  }\n\n}\n\n_defineProperty(Index, \"defaultProps\", {\n  posts: []\n});\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}