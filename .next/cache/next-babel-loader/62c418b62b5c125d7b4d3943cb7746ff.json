{"ast":null,"code":"import _defineProperty from \"/github/workspace/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/github/workspace/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Context } from '@/utils/global';\nimport MonacoEditor from '@monaco-editor/react/lib/';\nexport function Editor(props) {\n  var onChange = props.onChange,\n      getRef = props.getRef,\n      restProps = _objectWithoutProperties(props, [\"onChange\", \"getRef\"]);\n\n  return /*#__PURE__*/_jsx(MonacoEditor //   onChange={handleEditorChange}\n  , _objectSpread(_objectSpread({}, restProps), {}, {\n    editorDidMount: function editorDidMount(_, editor) {\n      getRef(editor);\n      if (onChange) editor.onDidChangeModelContent(onChange);\n    }\n  }));\n}\nexport default function RenderEditor(props) {\n  var raw = props.raw,\n      fontSize = props.fontSize,\n      _getRef = props.getRef,\n      onSave = props.onSave,\n      onScoll = props.onScoll,\n      onChange = props.onChange;\n  var context = React.useContext(Context);\n  var opts = {\n    fontSize: fontSize,\n    wordWrap: 'on',\n    quickSuggestions: false,\n    acceptSuggestionOnCommitCharacter: false,\n    acceptSuggestionOnEnter: 'off',\n    snippetSuggestions: 'none'\n  };\n  return /*#__PURE__*/_jsx(Editor, {\n    language: \"markdown\",\n    theme: context.theme == 'default' ? 'light' : 'dark',\n    getRef: function getRef(ref) {\n      _getRef(ref);\n\n      ref.onDidScrollChange(onScoll); // Save post when Ctrl + S clicked\n\n      ref.addCommand(2097, onSave);\n      if (raw !== '') ref.setValue(raw);\n    },\n    options: opts,\n    onChange: onChange\n  });\n}","map":null,"metadata":{},"sourceType":"module"}