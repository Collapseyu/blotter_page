{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nvar Body = /*#__PURE__*/function (_React$Component) {\n  _inherits(Body, _React$Component);\n\n  var _super = _createSuper(Body);\n\n  function Body() {\n    var _this;\n\n    _classCallCheck(this, Body);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"div\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"root\", void 0);\n\n    return _this;\n  }\n\n  _createClass(Body, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof document !== 'undefined') {\n        this.div = document.createElement('div');\n        this.root = document.getElementById('portals');\n      }\n\n      if (!!this.root && !!this.div) {\n        this.root.appendChild(this.div);\n      } else {\n        console.warn('Portal initial error');\n      }\n\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (!!this.root) this.root.removeChild(this.div);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return !!this.root && !!this.div ? ReactDOM.createPortal(this.props.children, this.div) : null;\n    }\n  }]);\n\n  return Body;\n}(React.Component);\n\nfunction Insert(renderChildren) {\n  /* \n          TODO:\n          在 Chrome 调试时，宽屏切换窄屏可能会导致这些用于插入元素的 div 占据空间，导致 body 宽度溢出\n          通常避免占位的解决办法应该是设置绝对定位，并定位至一个很大的负值，但是这会影响 Popover 的位置计算\n          该问题目前只有在调试工具切换屏幕大小时重现成功，暂时降低解决优先级\n      */\n  var bodyWrapper = document.createElement('div');\n  var root = document.getElementById('portals');\n  root.appendChild(bodyWrapper);\n  var params = {\n    remove: function remove() {\n      root.removeChild(bodyWrapper);\n    },\n    update: function update(children) {\n      ReactDOM.render(children, bodyWrapper);\n    }\n  };\n  ReactDOM.render(renderChildren(params), bodyWrapper);\n  return params;\n}\n\nexport default Object.assign(Body, {\n  Insert: Insert\n});","map":null,"metadata":{},"sourceType":"module"}