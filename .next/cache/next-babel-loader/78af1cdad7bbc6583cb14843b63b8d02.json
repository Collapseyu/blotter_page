{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nexport default function DragableRow(props) {\n  var ref = React.useRef();\n\n  var dragKey = props.dragKey,\n      index = props.index,\n      onMove = props.onMove,\n      restProps = _objectWithoutProperties(props, [\"dragKey\", \"index\", \"onMove\"]);\n\n  var style = props.style;\n  var type = dragKey;\n\n  var _useDrop = useDrop({\n    accept: type,\n    drop: function drop(item) {\n      if (!!onMove) onMove(item.index, index);\n      return item;\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2);\n\n  _objectDestructuringEmpty(_useDrop2[0]);\n\n  var drop = _useDrop2[1];\n\n  var _useDrag = useDrag({\n    item: {\n      type: type,\n      index: index\n    }\n  }),\n      _useDrag2 = _slicedToArray(_useDrag, 2);\n\n  _objectDestructuringEmpty(_useDrag2[0]);\n\n  var drag = _useDrag2[1];\n\n  if (!!onMove) {\n    drop(drag(ref));\n    style = _objectSpread({\n      cursor: 'move'\n    }, style);\n  }\n\n  return __jsx(\"tr\", _extends({\n    ref: ref,\n    style: style\n  }, restProps));\n}","map":null,"metadata":{},"sourceType":"module"}