{"ast":null,"code":"import \"antd/lib/collapse/style/css\";\nimport _Collapse from \"antd/lib/collapse\";\nimport \"antd/lib/descriptions/style/css\";\nimport _Descriptions from \"antd/lib/descriptions\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport If from '@/components/if';\nimport Card from '@/components/card';\nimport Avatar from '@/components/avatar';\nimport { Tooltip } from '@/components/popover';\nimport Button from '@/components/button';\nimport { QQ, Github, Mail, Zhihu, Alipay, Wechat } from '@/components/svg';\nimport { Flex } from '@/components/container';\nimport { Context } from '@/utils/global';\nimport { showQR } from '@/utils/payment';\nimport { githubRepos, about } from '@/utils/api';\nimport moment from '@/utils/moment';\nimport textStyles from '@/styles/text.less';\n\nfunction ToColumnCount(num) {\n  const count = [1, 2, 3, 4, 6, 8, 12, 24];\n\n  for (var i = 0; i < count.length; i++) {\n    if (count[i] >= num) return count[i];\n  }\n\n  return count[count.length - 1];\n}\n\nclass AboutPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"render_pay\", () => {\n      return __jsx(_List, {\n        dataSource: [{\n          name: 'wechat',\n          icon: __jsx(Wechat, null)\n        }, {\n          name: 'alipay',\n          icon: __jsx(Alipay, null)\n        }],\n        grid: {\n          column: 2\n        },\n        style: {\n          textAlign: 'center'\n        },\n        renderItem: (item, idx) => __jsx(_List.Item, {\n          key: idx\n        }, __jsx(Button, {\n          size: \"large\",\n          circle: true,\n          icon: item.icon,\n          onClick: () => showQR(item.name)\n        }))\n      });\n    });\n\n    _defineProperty(this, \"render_social\", () => {\n      const socialMedia = [{\n        raw: this.props.github,\n        name: `Github: ${this.props.github}`,\n        link: `https://github.com/${this.props.github}`,\n        icon: () => __jsx(Github, null)\n      }, {\n        raw: this.props.qq,\n        name: `QQ: ${this.props.qq}`,\n        link: `https://wpa.qq.com/msgrd?v=3&uin=${this.props.qq}&site=qq&menu=yes`,\n        icon: () => __jsx(QQ, null)\n      }, {\n        raw: this.props.email,\n        name: `Email: ${this.props.email}`,\n        link: `mailto:${this.props.email}`,\n        icon: () => __jsx(Mail, null)\n      }, {\n        raw: this.props.zhihu,\n        name: `知乎`,\n        link: `https://www.zhihu.com/people/${this.props.zhihu}`,\n        icon: () => __jsx(Zhihu, null)\n      }].filter(item => !!item.raw);\n      return __jsx(Flex, {\n        mainAxis: \"space-around\"\n      }, socialMedia.map(item => __jsx(\"a\", {\n        key: item.name,\n        href: item.link,\n        target: \"_blank\"\n      }, __jsx(Tooltip, {\n        title: item.name,\n        style: {\n          fontSize: 25\n        },\n        className: textStyles.primary\n      }, item.icon()))));\n    });\n\n    _defineProperty(this, \"render_education\", () => {\n      const columns = [{\n        dataIndex: 'name',\n        title: '名称',\n        align: 'center'\n      }, {\n        dataIndex: 'major',\n        title: '方向',\n        align: 'center',\n        width: 250,\n        ellipsis: true\n      }, {\n        dataIndex: 'time',\n        title: '时间',\n        align: 'center',\n        width: 250,\n        ellipsis: true\n      }];\n      return __jsx(_Table, {\n        rowKey: record => record.name,\n        dataSource: this.props.edu,\n        columns: columns,\n        pagination: false,\n        scroll: {\n          x: true\n        }\n      });\n    });\n\n    _defineProperty(this, \"render_awards\", () => {\n      const columns = [{\n        dataIndex: 'name',\n        align: 'center'\n      }, {\n        dataIndex: 'level',\n        align: 'center',\n        width: 250,\n        ellipsis: true\n      }, {\n        dataIndex: 'count',\n        render: value => `×${value}`,\n        align: 'center',\n        width: 250,\n        ellipsis: true\n      }];\n      return __jsx(_Table, {\n        dataSource: this.props.awards,\n        rowKey: record => record.name,\n        columns: columns,\n        size: \"small\",\n        showHeader: false,\n        pagination: false,\n        scroll: {\n          x: true\n        }\n      });\n    });\n\n    _defineProperty(this, \"render_projects\", () => {\n      if (!!!this.props.github) return null;\n      const columns = [{\n        dataIndex: 'name',\n        title: '项目名',\n        ellipsis: true,\n        align: 'center',\n        render: (value, record) => __jsx(\"a\", {\n          target: \"_blank\",\n          href: record.html_url\n        }, value)\n      }, {\n        dataIndex: 'stargazers_count',\n        title: 'star数',\n        align: 'center',\n        width: 100,\n        ellipsis: true,\n        sorter: (a, b) => a.stargazers_count - b.stargazers_count\n      }, {\n        dataIndex: 'forks_count',\n        title: 'fork数',\n        align: 'center',\n        width: 100,\n        ellipsis: true,\n        sorter: (a, b) => a.forks_count - b.forks_count\n      }, {\n        dataIndex: 'pushed_at',\n        title: '最新更新',\n        align: 'center',\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => new Date(a.pushed_at).getTime() - new Date(b.pushed_at).getTime(),\n\n        render(text) {\n          return moment(text).format('YYYY-MM-DD hh:mm:ss');\n        },\n\n        width: 200,\n        ellipsis: true\n      }, {\n        dataIndex: 'language',\n        title: '语言',\n        filters: Array.from(new Set(this.state.repos.map(item => item.language).filter(l => l !== null))).map(l => ({\n          text: l,\n          value: l\n        })),\n        onFilter: (value, record) => record.language && record.language.includes(record.language),\n        align: 'center',\n        width: 150,\n        ellipsis: true\n      }];\n      return __jsx(_Table, {\n        rowKey: record => record.name,\n        dataSource: this.state.repos,\n        columns: columns,\n        loading: this.state.loading,\n        scroll: {\n          x: true\n        },\n        expandable: {\n          expandedRowRender: record => __jsx(_Descriptions, {\n            bordered: true,\n            size: \"small\"\n          }, __jsx(_Descriptions.Item, {\n            key: \"created_at\",\n            label: \"\\u521B\\u5EFA\\u65F6\\u95F4\"\n          }, record.created_at), __jsx(_Descriptions.Item, {\n            key: \"pushed_at\",\n            label: \"\\u6700\\u8FD1\\u63A8\\u9001\\u65F6\\u95F4\"\n          }, record.pushed_at), __jsx(_Descriptions.Item, {\n            key: \"updated_at\",\n            label: \"\\u6570\\u636E\\u66F4\\u65B0\\u65F6\\u95F4\"\n          }, record.updated_at), __jsx(_Descriptions.Item, {\n            key: \"description\",\n            label: \"\\u63CF\\u8FF0\"\n          }, record.description))\n        },\n        pagination: {\n          pageSize: 10\n        }\n      });\n    });\n\n    this.state = {\n      repos: [],\n      loading: false\n    };\n  }\n\n  static async getInitialProps() {\n    var r = await about();\n    return r;\n  }\n\n  async componentDidMount() {\n    if (!!this.props.github) {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        var repos = (await githubRepos(this.props.github)).repos;\n      } catch {\n        repos = [];\n      }\n\n      this.setState({\n        repos,\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Card, {\n      neumorphism: true\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `关于我|${context.blog_name}`))), __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(Context.Consumer, null, context => __jsx(Avatar, {\n      style: {\n        fontSize: 64,\n        margin: 'auto'\n      },\n      src: context.avatar\n    })), __jsx(\"br\", null), __jsx(\"strong\", null, this.props.author)), __jsx(If, {\n      condition: !!this.props.quote\n    }, __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"em\", {\n      dangerouslySetInnerHTML: {\n        __html: this.props.quote\n      }\n    }))), __jsx(If, {\n      condition: !!this.props.description\n    }, __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: this.props.description\n      }\n    }))), __jsx(\"p\", null, this.render_pay()), __jsx(\"p\", null, this.render_social()), __jsx(_Collapse, {\n      defaultActiveKey: ['education', 'awards', 'projects']\n    }, __jsx(_Collapse.Panel, {\n      header: \"\\u6559\\u80B2\\u3001\\u5DE5\\u4F5C\\u7ECF\\u5386\",\n      key: \"education\"\n    }, this.render_education()), __jsx(_Collapse.Panel, {\n      header: \"\\u62B1\\u5927\\u817F\\u5956\\u9879\",\n      key: \"awards\"\n    }, this.render_awards()), __jsx(_Collapse.Panel, {\n      header: \"\\u5F00\\u6E90\\u9879\\u76EE\\uFF08\\u9700\\u8981\\u8BBF\\u95EE Github API\\uFF0C\\u90E8\\u5206\\u7F51\\u7EDC\\u53EF\\u80FD\\u4F1A\\u51FA\\u9519\\uFF09\",\n      key: \"projects\"\n    }, this.render_projects())));\n  }\n\n}\n\n_defineProperty(AboutPage, \"defaultProps\", {});\n\nexport default AboutPage;","map":null,"metadata":{},"sourceType":"module"}