{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport Loading from '@/components/loading';\nimport Avatar from '@/components/avatar';\nimport Popover, { Tooltip } from '@/components/popover';\nimport { Question, Mail, Disconnect, Close } from '@/components/svg';\nimport Card from '@/components/card';\nimport Input, { TextArea, CheckBox, Hint } from '@/components/input';\nimport Button from '@/components/button';\nimport moment from '@/utils/moment';\nimport { concat } from '@/utils/component';\nimport { comments, avatar, addComment } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport shadowStyles from '@/styles/shadow.module.scss';\nimport textStyles from '@/styles/text.module.scss';\nimport styles from './comment.module.scss';\n\nconst adWarning = __jsx(\"b\", null, \"\\u5E7F\\u544A\\u8BC4\\u8BBA\\uFF0C\\u5DF2\\u88AB\\u5C4F\\u853D\");\n\nconst delWarning = __jsx(\"b\", null, \"\\u8BE5\\u8BC4\\u8BBA\\u5DF2\\u88AB\\u5220\\u9664\");\n\nconst defaultAvatar = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\nconst CommentContext = /*#__PURE__*/React.createContext({\n  url: '',\n  callback: () => {}\n});\n\nfunction getCommentID(id) {\n  return `blotter-comment-${id}`;\n}\n\nfunction jumpParent(id) {\n  const target = document.getElementById(getCommentID(id));\n  const top = target.getBoundingClientRect().top + window.pageYOffset;\n\n  if (!!target && top > 0) {\n    scrollTo(0, top - 10);\n  }\n}\n\nconst Editor = props => {\n  const {\n    id,\n    closeEditorCallback\n  } = props;\n  const [avatarURL, setAvatarURL] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const {\n    url,\n    callback\n  } = React.useContext(CommentContext);\n  const [email, setEmail] = React.useState('');\n  const [raw, setRaw] = React.useState('');\n  const [recv, setRecv] = React.useState(true);\n\n  const onSubmitClick = async () => {\n    setLoading(true);\n    addComment({\n      url,\n      reply: id,\n      email,\n      recv,\n      raw\n    }).then(r => {\n      if (ShowNotification(r)) {\n        if (!!closeEditorCallback) closeEditorCallback();else {\n          setRaw('');\n        }\n        if (!!callback) callback();\n      }\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  const onEmailBlur = () => {\n    avatar(email, data => setAvatarURL(data.avatar));\n  };\n\n  return __jsx(Flex, {\n    subAxis: \"flex-start\",\n    wrap: false\n  }, __jsx(Flex.Item, {\n    style: {\n      flex: '0 0 5em',\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  }, __jsx(Avatar, {\n    src: avatarURL ? avatarURL : defaultAvatar,\n    style: {\n      width: '2.5em',\n      height: '2.5em'\n    }\n  })), __jsx(Flex.Item, {\n    style: {\n      flex: '1 1 auto'\n    }\n  }, __jsx(Flex, {\n    direction: \"TB\",\n    fullWidth: true\n  }, __jsx(Input, {\n    value: email,\n    onBlur: onEmailBlur,\n    placeholder: \"\\u8F93\\u5165\\u60A8\\u7684\\u90AE\\u7BB1(\\u4EC5\\u7528\\u4E8E\\u6536\\u53D6\\u6709\\u4EBA\\u56DE\\u590D\\u60A8\\u7684\\u901A\\u77E5\\uFF0C\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6CC4\\u9732)\",\n    style: {\n      width: '100%'\n    },\n    onChange: setEmail,\n    hint: email !== '' && !/^(\\w+)(\\.\\w+)*@(\\w+)(\\.\\w+)*.(\\w+)$/i.test(email) && __jsx(Hint, {\n      error: true\n    }, \"\\u4F60\\u786E\\u5B9A\\u8FD9\\u662F\\u4E00\\u4E2A\\u90AE\\u7BB1\\uFF1F\")\n  }), __jsx(TextArea, {\n    value: raw,\n    rows: 5,\n    placeholder: \"\\u793C\\u8C8C\\u4EA4\\u6D41\\uFF0C\\u81F3\\u5C115\\u4E2A\\u5B57\\u7B26\",\n    style: {\n      width: '100%'\n    },\n    onChange: setRaw,\n    hint: raw !== '' && raw.length < 5 && __jsx(Hint, {\n      error: true\n    }, \"\\u8BC4\\u8BBA\\u8FDE\\u4E94\\u4E2A\\u5B57\\u90FD\\u4E0D\\u5230\\uFF1F\\u4E0D\\u4F1A\\u5427\\u4E0D\\u4F1A\\u5427\")\n  }), __jsx(Flex, null, __jsx(CheckBox, {\n    value: recv,\n    onChange: setRecv\n  }, \"\\u6536\\u5230\\u56DE\\u590D\\u65F6\\u4F7F\\u7528\\u90AE\\u4EF6\\u901A\\u77E5\"), __jsx(Popover, {\n    trigger: ['click', 'hover'],\n    placement: \"bottom\",\n    style: {\n      lineHeight: '100%'\n    },\n    popoverClass: shadowStyles.shadow,\n    popoverStyle: {\n      boxShadow: '5px 5px 30px var(--shadow)',\n      ['--popover-backgroud']: 'var(--background)'\n    },\n    component: __jsx(Card, {\n      style: {\n        background: 'var(--background)',\n        maxWidth: '80vw'\n      }\n    }, __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u652F\\u6301Markdown\\uFF0C\\u5982\\u679C\\u6709\\u4EBA\\u56DE\\u590D\\u4F60\\u7684\\u8BC4\\u8BBA\\uFF0C\\u4F1A\\u6709\\u90AE\\u4EF6\\u63D0\\u9192\\u53D1\\u9001\\u5230\\u4F60\\u7684\\u90AE\\u7BB1\\uFF0C\\u5982\\u679C\\u4E0D\\u60F3\\u67E5\\u770B\\uFF0C\\u53EF\\u4EE5\\u53D6\\u6D88\"), __jsx(\"p\", null, \"\\u5934\\u50CF\\u5C06\\u4F18\\u5148\\u4F7F\\u7528\\u90AE\\u7BB1\\u5BF9\\u5E94Github\\u8D26\\u6237\\u5934\\u50CF,\\u5982\\u679C\\u83B7\\u53D6\\u5931\\u8D25\\u5C06\\u4F7F\\u7528\", __jsx(\"a\", {\n      href: \"https://cn.gravatar.com/\"\n    }, \"Gravatar\"), \"\\u5934\\u50CF\"), __jsx(\"p\", null, \"\\u90AE\\u7BB1\\u5730\\u5740\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6E32\\u67D3\\uFF0C\\u53EF\\u4EE5\\u907F\\u514D\\u88AB\\u626B\\u63CF\\u5DE5\\u5177\\u8BB0\\u5F55\\uFF0C\\u4F46\\u4ECD\\u53EF\\u80FD\\u901A\\u8FC7\\u5934\\u50CF\\u5730\\u5740\\u9006\\u63A8\\u51FA\\u90AE\\u7BB1\"), __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u5185\\u5BB9\\u8BF7\\u9075\\u5B88\\u76F8\\u5E94\\u6CD5\\u5F8B\\u6CD5\\u89C4\\uFF0C\\u5E76\\u4E14\\u8BF7\\u4E0D\\u8981\\u53D1\\u5E03\\u5E7F\\u544A\"))\n  }, __jsx(Question, null)), __jsx(Flex.Item, {\n    style: {\n      flex: '1 1 auto',\n      textAlign: 'right'\n    }\n  }, __jsx(Button, {\n    primary: true,\n    neumorphism: true,\n    onClick: onSubmitClick,\n    loading: loading,\n    disabled: raw.length < 5 || !/^(\\w+)(\\.\\w+)*@(\\w+)(\\.\\w+)*.(\\w+)$/i.test(email)\n  }, \"\\u8BC4\\u8BBA\"))))));\n};\n\nconst Comment = props => {\n  const {\n    comment,\n    depth,\n    quote,\n    parent\n  } = props;\n  const [reply, setReply] = React.useState(false);\n  const time = moment(comment.time);\n  const context = React.useContext(Context);\n\n  const childrenAndEditor = () => __jsx(React.Fragment, null, reply ? __jsx(Editor, {\n    id: comment.id,\n    closeEditorCallback: () => setReply(false)\n  }) : null, __jsx(CommentList, {\n    comments: comment.children,\n    depth: depth + 1,\n    parent: comment\n  }));\n\n  var maxDepth = context.big_screen ? 5 : 2;\n  var actions;\n\n  if (quote) {\n    actions = [__jsx(\"span\", {\n      key: \"jump\",\n      className: concat(textStyles.secondary, textStyles.em75),\n      onClick: () => jumpParent(comment.id),\n      style: {\n        lineHeight: '100%',\n        cursor: 'pointer'\n      }\n    }, \"\\u8DF3\\u8F6C\\u5230\\u8BE5\\u8BC4\\u8BBA\")];\n  } else {\n    actions = [reply ? __jsx(\"span\", {\n      key: \"cancel\",\n      className: concat(textStyles.secondary, textStyles.em75),\n      onClick: () => setReply(false),\n      style: {\n        cursor: 'pointer',\n        lineHeight: '100%'\n      }\n    }, \"\\u53D6\\u6D88\\u56DE\\u590D\", __jsx(Close, null)) : __jsx(\"span\", {\n      key: \"reply\",\n      className: concat(textStyles.secondary, textStyles.em75),\n      onClick: () => setReply(true),\n      style: {\n        cursor: 'pointer',\n        lineHeight: '100%'\n      }\n    }, \"\\u56DE\\u590D\"), __jsx(\"span\", {\n      key: \"email\",\n      className: concat(textStyles.secondary, textStyles.em75),\n      style: {\n        lineHeight: '100%'\n      }\n    }, comment.recv ? __jsx(Tooltip, {\n      title: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u4F46\\u662F\\u4ED6/\\u5979\\u4E0D\\u4E00\\u5B9A\\u4F1A\\u770B\\u90AE\\u4EF6\\uFF09\"\n    }, __jsx(Mail, null)) : __jsx(Tooltip, {\n      title: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4E0D\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u6240\\u4EE5\\u4F60\\u53EF\\u80FD\\u65E0\\u6CD5\\u5F97\\u5230\\u53CD\\u9988\\uFF09\"\n    }, __jsx(Disconnect, null)))];\n  }\n\n  return __jsx(\"div\", {\n    id: quote ? '' : getCommentID(comment.id),\n    className: styles.comment\n  }, __jsx(Flex, {\n    subAxis: \"flex-start\",\n    wrap: false,\n    style: quote ? {\n      borderLeft: '#ccc 5px solid',\n      paddingLeft: 10\n    } : {}\n  }, __jsx(Flex.Item, {\n    style: {\n      flex: '0 0 5em',\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  }, __jsx(Avatar, {\n    src: comment.avatar ? comment.avatar : defaultAvatar,\n    style: {\n      width: '2.5em',\n      height: '2.5em'\n    }\n  })), __jsx(Flex.Item, {\n    style: {\n      flex: '1 1 auto'\n    }\n  }, __jsx(Flex, {\n    mainSize: \"small\",\n    direction: \"TB\",\n    fullWidth: true\n  }, __jsx(Flex, {\n    mainAxis: \"flex-start\"\n  }, comment.email, __jsx(Tooltip, {\n    title: time.format('YYYY-MM-DD HH:mm:ss')\n  }, __jsx(\"span\", {\n    className: concat(textStyles.secondary, textStyles.em75)\n  }, time.fromNow()))), __jsx(\"div\", null, comment.ad ? adWarning : comment.show ? __jsx(\"div\", null, !quote && depth != 1 && depth >= maxDepth ? __jsx(Comment, {\n    comment: parent,\n    depth: depth,\n    quote: true\n  }) : null, __jsx(\"div\", {\n    style: {\n      wordBreak: 'break-all'\n    },\n    dangerouslySetInnerHTML: {\n      __html: comment.content\n    }\n  })) : delWarning), __jsx(Flex, {\n    mainAxis: \"flex-start\",\n    subAxis: \"baseline\"\n  }, actions), !quote && __jsx(\"hr\", null), !quote && depth < maxDepth ? childrenAndEditor() : null))), !quote && depth >= maxDepth ? childrenAndEditor() : null);\n};\n\nconst CommentList = props => {\n  const {\n    comments,\n    depth,\n    parent,\n    total,\n    loading\n  } = props;\n  return loading ? __jsx(Loading, null) : comments.length || depth == 1 ? __jsx(Flex, {\n    direction: \"TB\",\n    fullWidth: true,\n    className: \"comment-list\"\n  }, [__jsx(\"p\", {\n    key: \"total\"\n  }, !!total ? `共 ${total} 条评论` : null), ...comments.map(comment => __jsx(Flex.Item, {\n    key: comment.id\n  }, __jsx(Comment, {\n    comment: comment,\n    depth: depth,\n    quote: false,\n    parent: parent\n  })))]) : null;\n};\n\nexport default function Comments(props) {\n  const {\n    url\n  } = props;\n  const [loading, setLoading] = React.useState(false);\n  const [total, setTotal] = React.useState(0);\n  const [commentList, setCommentList] = React.useState([]);\n  const initialComments = React.useCallback(() => {\n    setLoading(true);\n    comments(url).then(data => {\n      setTotal(data.total);\n      setCommentList(data.comments.reverse());\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [setLoading, setTotal, setCommentList, url]);\n  React.useEffect(() => initialComments(), []);\n  return __jsx(CommentContext.Provider, {\n    value: {\n      url,\n      callback: initialComments\n    }\n  }, __jsx(Flex, {\n    direction: \"TB\",\n    id: \"blotter-comment\",\n    className: styles.comments,\n    fullWidth: true\n  }, __jsx(Editor, {\n    id: \"000000000000\"\n  }), __jsx(CommentList, {\n    comments: commentList,\n    depth: 1,\n    total: total,\n    loading: loading\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}