{"ast":null,"code":"import \"antd/lib/space/style/css\";\nimport _Space from \"antd/lib/space\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ObjectFilter } from '@/utils/object';\nimport { Context } from '@/utils/global';\n\n// interface ContainerProps extends ComponentProps<'base'> {\n//   xs?: number;\n//   sm?: number;\n//   md?: number;\n//   lg?: number;\n//   xl?: number;\n//   xxl?: number;\n//   gutter_h?: number;\n//   gutter_v?: number;\n// }\n// interface ContainerState {}\n// class Container extends React.Component<ContainerProps, ContainerState> {\n//   static defaultProps: ContainerProps = {\n//     xs: 24,\n//     sm: 20,\n//     md: 18,\n//     lg: 16,\n//     xl: undefined,\n//     xxl: undefined,\n//     gutter_h: 20,\n//     gutter_v: 40,\n//   };\n//   constructor(props: ContainerProps) {\n//     super(props);\n//   }\n//   render() {\n//     return <div style={{}}>{this.props.children}</div>;\n//   }\n// }\nfunction Container(props) {\n  const context = React.useContext(Context);\n  return __jsx(\"div\", null, props.children);\n}\n\nconst Space = props => {\n  const {\n    direction = 'vertical',\n    size,\n    textCenter = false,\n    flexCenter = false,\n    className,\n    children,\n    style,\n    flex\n  } = props;\n  var flexStyle = {};\n  if (!!flex) flexStyle = {\n    flex: 'auto',\n    justifyContent: flex\n  };\n  var classNames = [className, 'fullWidth'];\n  if (flexCenter) classNames.push('flexCenter');\n  if (textCenter) classNames.push('textCenter');\n  return __jsx(_Space, {\n    className: classNames.join(' '),\n    direction: direction,\n    size: size,\n    style: _objectSpread(_objectSpread({}, flexStyle), style)\n  }, children);\n};\n\nconst TextCenter = props => {\n  return __jsx(\"div\", {\n    className: \"textCenter\"\n  }, props.children);\n};\n\nconst FlexCenter = props => {\n  return __jsx(\"div\", {\n    className: \"flexCenter\"\n  }, props.children);\n};\n\nexport default Container;\nexport { Space, TextCenter, FlexCenter };\n\nfunction getSize(size) {\n  return size === 'large' ? 20 : size === 'middle' ? 10 : size === 'small' ? 5 : size === 'none' ? 0 : size;\n}\n\nconst FlexComponent = props => {\n  const {\n    direction = 'LR',\n    wrap = true,\n    mainSize = 'middle',\n    subSize = 0,\n    mainAxis = 'space-between',\n    subAxis = 'center',\n    itemStyle = {},\n    fullWidth = false,\n    children,\n    style\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"direction\", \"wrap\", \"mainSize\", \"subSize\", \"mainAxis\", \"subAxis\", \"itemStyle\", \"fullWidth\", \"children\", \"style\"]);\n\n  const list = (Array.isArray(children) ? children : [children]).filter(s => !!s);\n  const dir = direction === 'LR' ? 'row' : direction === 'TB' ? 'column' : direction;\n  const mSize = getSize(mainSize);\n  const sSize = getSize(subSize); // 容器样式\n\n  const containerStyles = {\n    display: 'flex',\n    flexDirection: dir,\n    flexWrap: wrap === true ? 'wrap' : wrap === false ? 'nowrap' : wrap,\n    justifyContent: mainAxis,\n    alignItems: subAxis\n  }; // 元素样式 - 计算每个元素之间的边距\n\n  var defaultStyle = {};\n  var specialStyle = {};\n  var after = 'marginRight';\n  var before = 'marginLeft';\n  var subAxis1 = 'marginTop';\n  var subAxis2 = 'marginBottom';\n  const specialPos = mainAxis === 'space-around' ? dir === 'row' || dir === 'column' ? 0 : list.length - 1 : dir === 'row' || dir === 'column' ? list.length - 1 : 0;\n\n  switch (dir) {\n    case 'row':\n      {\n        after = 'marginRight';\n        before = 'marginLeft';\n        subAxis1 = 'marginTop';\n        subAxis2 = 'marginBottom';\n        break;\n      }\n\n    case 'column':\n      {\n        after = 'marginBottom';\n        before = 'marginTop';\n        subAxis1 = 'marginLeft';\n        subAxis2 = 'marginRight';\n        break;\n      }\n\n    case 'row-reverse':\n      {\n        after = 'marginLeft';\n        before = 'marginRight';\n        subAxis1 = 'marginTop';\n        subAxis2 = 'marginBottom';\n        break;\n      }\n\n    case 'column-reverse':\n      {\n        after = 'marginTop';\n        before = 'marginBottom';\n        subAxis1 = 'marginLeft';\n        subAxis2 = 'marginRight';\n        break;\n      }\n  }\n\n  if (mainAxis === 'space-around') {\n    defaultStyle = {\n      [after]: mSize,\n      [subAxis1]: sSize,\n      [subAxis2]: sSize\n    };\n    specialStyle = {\n      [after]: mSize,\n      [before]: mSize,\n      [subAxis1]: sSize,\n      [subAxis2]: sSize\n    };\n  } else {\n    defaultStyle = {\n      [after]: mSize,\n      [subAxis2]: sSize\n    };\n    specialStyle = {\n      [subAxis2]: sSize\n    };\n  } // 删除为 0 的值\n\n\n  defaultStyle = ObjectFilter(defaultStyle, (_, value) => value != 0);\n  specialStyle = ObjectFilter(specialStyle, (_, value) => value != 0);\n  return __jsx(\"div\", _extends({\n    style: _objectSpread(_objectSpread(_objectSpread({}, fullWidth ? {\n      width: '100%'\n    } : {}), containerStyles), style)\n  }, restProps), list.map((child, idx) => __jsx(FlexItem, {\n    key: idx,\n    style: _objectSpread(_objectSpread(_objectSpread({}, fullWidth ? {\n      width: '100%'\n    } : {}), idx === specialPos ? specialStyle : defaultStyle), itemStyle)\n  }, child)));\n};\n\nconst FlexItem = props => {\n  var {\n    style = {},\n    className = '',\n    children\n  } = props,\n      restProps = _objectWithoutProperties(props, [\"style\", \"className\", \"children\"]);\n\n  var child = children;\n  if (!!!child) return null;\n  const key = child.key;\n\n  if (!Array.isArray(child) && !!child.type && !!child.type.name && child.type.displayName === FlexItem.displayName) {\n    const _ref = child.props,\n          {\n      style: style2,\n      className: className2,\n      children: child2\n    } = _ref,\n          restProps2 = _objectWithoutProperties(_ref, [\"style\", \"className\", \"children\"]);\n\n    style = _objectSpread(_objectSpread({}, style), style2);\n    className = [className, className2].filter(s => s != '').join(' ');\n    child = child2;\n    restProps = _objectSpread(_objectSpread({}, restProps), restProps2);\n  }\n\n  return __jsx(\"div\", _extends({\n    key: key,\n    style: style,\n    className: className\n  }, restProps), child);\n};\n\nFlexItem.displayName = 'FlexItem';\nexport const Flex = Object.assign(FlexComponent, {\n  Item: FlexItem\n});","map":null,"metadata":{},"sourceType":"module"}