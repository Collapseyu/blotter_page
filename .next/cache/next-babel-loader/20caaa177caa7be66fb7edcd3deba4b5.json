{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport { concat } from '@/utils/component';\nimport styles from './tabs.less';\n\nfunction Tabs(props) {\n  const {\n    selected,\n    defaultSelected,\n    children,\n    onChange = () => [],\n    className,\n    keepInDOM = false\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"selected\", \"defaultSelected\", \"children\", \"onChange\", \"className\", \"keepInDOM\"]);\n\n  const childList = React.Children.toArray(children).filter(child => !!child && !!child.type && child.type.displayName === TabsItem.displayName);\n  const itemProps = childList.map(item => item.props);\n  const [state, setState] = React.useState(typeof defaultSelected === 'undefined' ? itemProps.length > 0 ? itemProps[0].name : '' : defaultSelected);\n  const nowSelected = typeof selected === 'undefined' ? state : selected;\n  const nowChildren = childList.filter(item => item.props.name === nowSelected);\n  return __jsx(Flex, _extends({}, restProps, {\n    direction: \"TB\",\n    fullWidth: true,\n    className: concat(styles.tabs, className)\n  }), __jsx(Flex, {\n    className: styles.nav,\n    wrap: false,\n    mainAxis: \"flex-start\"\n  }, itemProps.map(item => __jsx(Flex.Item, {\n    key: item.name,\n    className: concat(styles.nav_item, nowSelected === item.name ? styles.selected : '', !!item.disabled ? styles.disabled : ''),\n    onClick: () => {\n      setState(item.name);\n      onChange(item.name);\n    }\n  }, item.name))), keepInDOM ? childList.map(item => __jsx(\"div\", {\n    key: item.key,\n    style: item.props.name === nowSelected ? {} : {\n      display: 'none'\n    }\n  }, item)) : nowChildren.length > 0 ? nowChildren[0] : null);\n}\n\nexport function TabsItem(props) {\n  const {\n    name,\n    disabled,\n    id,\n    children,\n    className,\n    style\n  } = props;\n  return __jsx(\"div\", {\n    className: concat(className),\n    style: style\n  }, children);\n}\nTabsItem.displayName = 'TabsItem';\nexport default Object.assign(Tabs, {\n  Item: TabsItem\n});","map":null,"metadata":{},"sourceType":"module"}