{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Input from '../input';\nimport { Plus, Minus } from '@/components/svg';\nexport default function InputNumber(props) {\n  var value = props.value,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? 0 : _props$defaultValue,\n      onChange = props.onChange,\n      _props$getValueCallba = props.getValueCallback,\n      getValueCallback = _props$getValueCallba === void 0 ? function () {} : _props$getValueCallba,\n      _props$setValueCallba = props.setValueCallback,\n      setValueCallback = _props$setValueCallba === void 0 ? function () {} : _props$setValueCallba,\n      max = props.max,\n      min = props.min,\n      restProps = _objectWithoutProperties(props, [\"value\", \"defaultValue\", \"onChange\", \"getValueCallback\", \"setValueCallback\", \"max\", \"min\"]);\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var nowValue = typeof value === 'undefined' ? state : value;\n  var onInputChange = React.useCallback(function (value) {\n    var num = parseFloat(value);\n    if (isNaN(num)) num = 0;\n    if (typeof max !== 'undefined' && num > max) num = max;\n    if (typeof min !== 'undefined' && num < min) num = min;\n    setState(num);\n    if (!!onChange) onChange(num);\n  }, [max, min, setState, onChange]);\n  React.useEffect(function () {\n    setValueCallback(function (value) {\n      setState(value);\n    });\n  }, [setState, setValueCallback]);\n  React.useEffect(function () {\n    getValueCallback(function () {\n      return nowValue;\n    });\n  }, [nowValue, getValueCallback]);\n  return __jsx(Input, _extends({}, restProps, {\n    value: nowValue.toString(),\n    onChange: onInputChange,\n    prefix: __jsx(Minus, {\n      onClick: function onClick() {\n        return onInputChange((nowValue - 1).toString());\n      }\n    }),\n    suffix: __jsx(Plus, {\n      onClick: function onClick() {\n        return onInputChange((nowValue + 1).toString());\n      }\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}