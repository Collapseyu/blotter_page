{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Input, { InputNumber } from '../';\nimport Popover from '@/components/popover';\nimport Card from '@/components/card';\nimport { Flex } from '@/components/container';\nimport Button from '@/components/button';\nimport { Close, Left } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport styles from './datepicker.module.scss';\nexport default function DatePicker(props) {\n  const {\n    defaultValue,\n    value,\n    onChange,\n    type = 'datetime',\n    label,\n    lablePlacement,\n    placeholder\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"defaultValue\", \"value\", \"onChange\", \"type\", \"label\", \"lablePlacement\", \"placeholder\"]);\n\n  const defaultDatetime = React.useMemo(() => typeof value !== 'undefined' ? new Date(value) : typeof defaultValue !== 'undefined' ? new Date(defaultValue) : new Date(), []);\n  const [date, setDate] = React.useState({\n    Y: defaultDatetime.getFullYear(),\n    M: defaultDatetime.getMonth() + 1,\n    D: defaultDatetime.getDate()\n  });\n  const [time, setTime] = React.useState({\n    H: defaultDatetime.getHours(),\n    M: defaultDatetime.getMinutes(),\n    S: defaultDatetime.getSeconds()\n  });\n  const {\n    _date,\n    _time\n  } = React.useMemo(() => {\n    if (typeof value === 'undefined') return {\n      _date: date,\n      _time: time\n    };\n    const datetime = new Date(value);\n    return {\n      _date: {\n        Y: datetime.getFullYear(),\n        M: datetime.getMonth() + 1,\n        D: datetime.getDate()\n      },\n      _time: {\n        H: datetime.getHours(),\n        M: datetime.getMinutes(),\n        S: datetime.getSeconds()\n      }\n    };\n  }, [value, date, time]);\n  const callback = React.useCallback((date, time) => {\n    if (!!onChange) {\n      switch (type) {\n        case 'datetime':\n          return onChange(new Date(date.Y, date.M - 1, date.D, time.H, time.M, time.S).getTime());\n\n        case 'date':\n          return onChange(new Date(date.Y, date.M - 1, date.D).getTime());\n\n        case 'time':\n          return onChange(time.H * 3600 + time.M * 60 + time.S);\n      }\n    }\n  }, [onChange]);\n  const dateFormat = React.useMemo(() => `${_date.Y}-${_date.M.toString().padStart(2, '0')}-${_date.D.toString().padStart(2, '0')}`, [_date]);\n  const timeFormat = React.useMemo(() => `${_time.H.toString().padStart(2, '0')}:${_time.M.toString().padStart(2, '0')}:${_time.S.toString().padStart(2, '0')}`, [_time]);\n  const format = React.useMemo(() => type === 'datetime' ? `${dateFormat} ${timeFormat}` : type === 'date' ? dateFormat : timeFormat, [dateFormat, timeFormat, type]);\n  return __jsx(\"div\", restProps, __jsx(Popover, {\n    card: true,\n    shadow: true,\n    placement: \"bottom\",\n    component: __jsx(Card, null, __jsx(Flex, {\n      direction: \"TB\",\n      wrap: false\n    }, (type === 'datetime' || type === 'date') && __jsx(DatePart, {\n      date: _date,\n      onChange: d => {\n        callback(d, _time);\n        setDate(d);\n      }\n    }), (type === 'datetime' || type === 'time') && __jsx(TimePart, {\n      time: _time,\n      onChange: t => {\n        callback(_date, t);\n        setTime(t);\n      }\n    })))\n  }, __jsx(Input, {\n    label: label,\n    lablePlacement: lablePlacement,\n    placeholder: placeholder,\n    editable: false,\n    value: format\n  })));\n}\n\nfunction DatePart(props) {\n  const {\n    date,\n    onChange = () => {}\n  } = props;\n  const [selectYear, setSelectYear] = React.useState(false);\n  const [selectMonth, setSelectMonth] = React.useState(false);\n  const [state, setState] = React.useState(date);\n  React.useEffect(() => setState(date), [date]);\n  return selectYear ? __jsx(Flex, {\n    direction: \"TB\",\n    mainSize: \"small\",\n    subAxis: \"flex-end\"\n  }, __jsx(Close, {\n    onClick: () => setSelectYear(false)\n  }), __jsx(YearSelect, {\n    year: state.Y,\n    onSelect: y => {\n      setSelectYear(false);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        Y: y\n      }));\n    }\n  })) : selectMonth ? __jsx(Flex, {\n    direction: \"TB\",\n    mainSize: \"small\",\n    subAxis: \"flex-end\"\n  }, __jsx(Close, {\n    onClick: () => setSelectMonth(false)\n  }), __jsx(MonthSelect, {\n    month: state.M,\n    onSelect: m => {\n      setSelectMonth(false);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        M: m\n      }));\n    }\n  })) : __jsx(Flex, {\n    direction: \"TB\",\n    mainSize: \"small\"\n  }, __jsx(Flex, {\n    mainAxis: \"space-around\"\n  }, __jsx(Button, {\n    icon: __jsx(Left, null),\n    onClick: () => setState(_objectSpread(_objectSpread({}, state), {}, {\n      Y: state.Y - 1\n    }))\n  }), __jsx(Button, {\n    onClick: () => setSelectYear(true)\n  }, state.Y), __jsx(Button, {\n    icon: __jsx(Left, {\n      style: {\n        transform: 'rotate(180deg)'\n      }\n    }),\n    onClick: () => setState(_objectSpread(_objectSpread({}, state), {}, {\n      Y: state.Y + 1\n    }))\n  })), __jsx(Flex, {\n    mainAxis: \"space-around\"\n  }, __jsx(Button, {\n    icon: __jsx(Left, null),\n    onClick: () => setState(_objectSpread(_objectSpread({}, state), {}, {\n      M: state.M - 1 === 0 ? 12 : state.M - 1,\n      Y: state.M - 1 === 0 ? state.Y - 1 : state.Y\n    }))\n  }), __jsx(Button, {\n    onClick: () => setSelectMonth(true)\n  }, state.M, \"\\u6708\"), __jsx(Button, {\n    icon: __jsx(Left, {\n      style: {\n        transform: 'rotate(180deg)'\n      }\n    }),\n    onClick: () => setState(_objectSpread(_objectSpread({}, state), {}, {\n      M: state.M + 1 === 13 ? 1 : state.M + 1,\n      Y: state.M + 1 === 13 ? state.Y + 1 : state.Y\n    }))\n  })), __jsx(DateSelect, {\n    year: state.Y,\n    month: state.M,\n    date: date,\n    onChange: date => onChange(date)\n  }));\n}\n\nconst yRange = 25;\nconst yRangeHalf = 12;\n\nfunction YearSelect(props) {\n  const {\n    year,\n    onSelect\n  } = props;\n  const [y, setY] = React.useState(year);\n  return __jsx(\"div\", {\n    className: styles.yearSelect\n  }, __jsx(Flex, {\n    mainAxis: \"space-around\"\n  }, __jsx(Button, {\n    icon: __jsx(Left, null),\n    onClick: () => setY(y - yRange)\n  }), year, __jsx(Button, {\n    icon: __jsx(Left, {\n      style: {\n        transform: 'rotate(180deg)'\n      }\n    }),\n    onClick: () => setY(y + yRange)\n  })), __jsx(\"div\", {\n    className: styles.body\n  }, Array(yRange).fill(0).map((_, idx) => __jsx(\"div\", {\n    key: idx,\n    className: idx + y - yRangeHalf === year ? styles.active : '',\n    onClick: () => onSelect(idx + y - yRangeHalf)\n  }, idx + y - yRangeHalf))));\n}\n\nconst M12 = Array(12).fill(0).map((_, i) => i);\n\nfunction MonthSelect(props) {\n  const {\n    month,\n    onSelect\n  } = props;\n  return __jsx(\"div\", {\n    className: styles.monthSelect\n  }, M12.map(i => __jsx(\"div\", {\n    key: i,\n    className: i + 1 === month ? styles.active : '',\n    onClick: () => onSelect(i + 1)\n  }, `${i + 1}月`)));\n}\n\nconst D7 = ['日', '一', '二', '三', '四', '五', '六'];\n\nfunction DateSelect(props) {\n  const {\n    year,\n    month,\n    date,\n    onChange = () => {}\n  } = props;\n  const now = new Date();\n  const today = React.useMemo(() => new Date(now.getFullYear(), now.getMonth(), now.getDate()), [now]);\n  const activeDate = React.useMemo(() => date.Y === year && date.M === month ? date.D : -1, [date, year, month]);\n  const todayDate = React.useMemo(() => today.getFullYear() === year && today.getMonth() + 1 == month ? today.getDate() : -1, [today, year, month]);\n  const {\n    calendar,\n    weekDay,\n    maxDay\n  } = React.useMemo(() => {\n    const weekDay = new Date(year, month - 1, 1).getDay();\n    const maxDay = new Date(year, month, 0).getDate();\n    const afterDay = 7 - (weekDay + maxDay) % 7;\n    var calendar = Array(weekDay + maxDay + afterDay).fill(0);\n\n    for (var i = 0; i < weekDay; i++) {\n      calendar[i] = new Date(year, month - 1, i - weekDay + 1).getDate();\n    }\n\n    for (var i = 1; i <= maxDay; i++) {\n      calendar[i + weekDay - 1] = i;\n    }\n\n    for (var i = 0; i < afterDay; i++) {\n      calendar[maxDay + weekDay + i] = i + 1;\n    }\n\n    return {\n      calendar,\n      weekDay,\n      maxDay\n    };\n  }, [date, year, month]);\n  return __jsx(Flex, {\n    direction: \"TB\",\n    subAxis: \"flex-end\",\n    mainSize: \"small\",\n    className: styles.date_select\n  }, __jsx(\"div\", {\n    className: styles.body\n  }, D7.map(i => __jsx(\"strong\", {\n    key: i\n  }, i)), calendar.map((i, idx) => __jsx(\"div\", {\n    key: idx,\n    className: concat(idx < weekDay || idx >= weekDay + maxDay ? styles.disabled : i === activeDate ? styles.active : i === todayDate ? styles.today : ''),\n    onClick: () => onChange({\n      Y: year,\n      M: month,\n      D: i\n    })\n  }, i))), __jsx(Button, {\n    size: \"small\",\n    onClick: () => onChange({\n      Y: today.getFullYear(),\n      M: today.getMonth() + 1,\n      D: today.getDate()\n    })\n  }, \"\\u4ECA\\u5929\"));\n}\n\nfunction TimePart(props) {\n  const {\n    time,\n    onChange\n  } = props;\n  const [state, setState] = React.useState(time);\n  return __jsx(Flex, {\n    direction: \"TB\"\n  }, __jsx(InputNumber, {\n    label: \"\\u65F6\",\n    value: state.H,\n    min: 0,\n    max: 23,\n    onChange: v => setState(_objectSpread(_objectSpread({}, state), {}, {\n      H: v\n    })),\n    size: \"small\"\n  }), __jsx(InputNumber, {\n    label: \"\\u5206\",\n    value: state.M,\n    min: 0,\n    max: 59,\n    onChange: v => setState(_objectSpread(_objectSpread({}, state), {}, {\n      M: v\n    })),\n    size: \"small\"\n  }), __jsx(InputNumber, {\n    label: \"\\u79D2\",\n    value: state.S,\n    min: 0,\n    max: 59,\n    onChange: v => setState(_objectSpread(_objectSpread({}, state), {}, {\n      S: v\n    })),\n    size: \"small\"\n  }), __jsx(Flex, null, __jsx(Button, {\n    onClick: () => {\n      const now = new Date();\n      setState({\n        H: now.getHours(),\n        M: now.getMinutes(),\n        S: now.getSeconds()\n      });\n    },\n    size: \"small\"\n  }, \"\\u5F53\\u524D\\u65F6\\u95F4\"), __jsx(Button, {\n    primary: true,\n    onClick: () => onChange(state),\n    size: \"small\"\n  }, \"\\u786E\\u5B9A\")));\n}","map":null,"metadata":{},"sourceType":"module"}