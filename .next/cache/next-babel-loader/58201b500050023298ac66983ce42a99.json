{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport CommentPart from '@/components/comment';\nimport { Flex } from '@/components/container';\nimport PostContent from '@/components/post_content';\nimport { Qzone, QQ, Link } from '@/components/svg';\nimport Card from '@/components/card';\nimport Avatar from '@/components/avatar';\nimport Button, { A } from '@/components/button';\nimport Anchor from '@/components/anchor';\nimport { post, view } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport './post.less';\n\nclass PostPage extends React.Component {\n  static async getInitialProps(args) {\n    var url = args.query.url;\n\n    if (Array.isArray(url)) {\n      url = url[0];\n    }\n\n    var r = await post(url);\n    return {\n      post: r\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"render_share\", () => {\n      return __jsx(Context.Consumer, null, context => {\n        if (typeof document === 'undefined') return null;\n        const url = `${context.root.replace(/\\/$/, '')}/${document.location.pathname.replace(/^\\//, '')}`;\n        return __jsx(Flex, {\n          direction: \"TB\",\n          mainAxis: \"flex-start\",\n          fullWidth: true\n        }, __jsx(Flex, {\n          direction: \"LR\"\n        }, __jsx(Flex.Item, {\n          style: {\n            flex: '0 0 5em',\n            display: 'flex',\n            justifyContent: 'center'\n          }\n        }, __jsx(Avatar, {\n          src: context.avatar,\n          style: {\n            width: '5em',\n            height: '5em'\n          }\n        })), __jsx(Flex.Item, {\n          style: {\n            flex: '1 1 auto'\n          }\n        }, __jsx(\"strong\", null, context.author), __jsx(\"div\", null, \"\\u672C\\u6587\\u7AE0\\u53D1\\u5E03\\u81EA \", __jsx(\"a\", {\n          href: context.root\n        }, context.blog_name), \"\\uFF0C\\u539F\\u6587\\u300E\", __jsx(\"a\", {\n          href: url\n        }, this.props.post.title), \"\\u300F\", __jsx(\"br\", null), \"\\u5982\\u65E0\\u7279\\u522B\\u8BF4\\u660E\\uFF0C\\u53EF\\u4EE5\\u76F4\\u63A5\\u8F6C\\u8F7D\\uFF0C\\u4F46\\u8BF7\\u6CE8\\u660E\\u539F\\u6587\\u51FA\\u5904\\u94FE\\u63A5\\uFF1A\", __jsx(\"a\", {\n          href: url\n        }, url)))), __jsx(Flex, {\n          direction: \"LR\",\n          mainAxis: \"space-around\"\n        }, __jsx(A, {\n          target: \"_blank\",\n          href: `http://connect.qq.com/widget/shareqq/index.html?url=${encodeURIComponent(url)}&sharesource=qzone&title=${encodeURIComponent(this.props.post.title)}&pics=${this.props.post.head_image}&summary=${this.props.post.abstract}&desc=${this.props.post.abstract}`,\n          icon: __jsx(QQ, null)\n        }), __jsx(A, {\n          target: \"_blank\",\n          href: `https://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=${encodeURIComponent(url)}&sharesource=qzone&title=${encodeURIComponent(this.props.post.title)}&pics=${this.props.post.head_image}&summary=${this.props.post.abstract}`,\n          icon: __jsx(Qzone, null)\n        }), __jsx(Button, {\n          icon: __jsx(Link, null),\n          onClick: () => alert(`请复制：${url}`)\n        })));\n      });\n    });\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    var url = this.props.router.query.url;\n\n    if (Array.isArray(url)) {\n      url = url[0];\n    }\n\n    view(url);\n  }\n\n  render() {\n    return typeof this.props.post === 'undefined' ? null : __jsx(React.Fragment, null, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `${this.props.post.title}|${context.blog_name}`), __jsx(\"meta\", {\n      name: \"keywords\",\n      key: \"keywords\",\n      content: Array.isArray(this.props.post.keywords) ? this.props.post.keywords.join(',') : ''\n    }), __jsx(\"meta\", {\n      key: \"description\",\n      name: \"description\",\n      content: this.props.post.abstract\n    }))), __jsx(Flex, {\n      direction: \"TB\",\n      fullWidth: true\n    }, __jsx(Card, {\n      neumorphism: true\n    }, __jsx(PostContent, {\n      post: this.props.post\n    })), __jsx(Card, {\n      neumorphism: true\n    }, this.render_share()), __jsx(Card, {\n      neumorphism: true\n    }, __jsx(CommentPart, {\n      url: `/post/${this.props.router.query.url}`\n    }))), __jsx(Anchor, {\n      style: {\n        position: 'fixed'\n      },\n      content: this.props.post.content\n    }));\n  }\n\n}\n\n_defineProperty(PostPage, \"defaultProps\", {\n  anchors: []\n});\n\nexport default withRouter(PostPage);","map":null,"metadata":{},"sourceType":"module"}