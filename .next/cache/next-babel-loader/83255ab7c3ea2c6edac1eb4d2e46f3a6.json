{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Loading } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport styles from './button.less';\nimport shadowStyles from '@/styles/shadow.less';\n\nfunction parseProps(props) {\n  const {\n    size = 'middle',\n    icon,\n    prefix,\n    suffix,\n    circle = false,\n    primary = false,\n    shadow = false,\n    neumorphism = false,\n    disabled = false,\n    clicked = false,\n    loading = false,\n    onClick,\n    style = {},\n    className,\n    children,\n    danger = false\n  } = props;\n  const classList = React.useMemo(() => {\n    var classList = [styles.button, className];\n\n    if (typeof size === 'string') {\n      classList.push(styles[size]);\n    } else {\n      style.fontSize = `${size}em`;\n      style.width = `${size + 1}em`;\n      style.height = `${size + 1}em`;\n    }\n\n    if (!!icon) classList.push(styles.icon);\n    if (circle) classList.push(styles.circle);\n    if (primary) classList.push(styles.primary);\n    if (shadow) classList.push(shadowStyles.shadow);\n    if (neumorphism && !clicked) classList.push(shadowStyles.neumorphism);\n    if (neumorphism && clicked) classList.push(shadowStyles.neumorphism_inset);\n    if (loading || disabled) classList.push('disabled');\n    if ((shadow || neumorphism) && !disabled) classList.push(shadowStyles.clickable);\n    if (danger) classList.push(styles.danger);\n    return classList;\n  }, [className, size, icon, circle, primary, shadow, neumorphism, clicked, loading, disabled, shadow, danger]);\n  return {\n    classList,\n    style,\n    onClick: disabled ? () => {} : onClick,\n    icon: loading && !!icon ? __jsx(Loading, null) : icon,\n    prefix,\n    suffix: loading && !icon ? __jsx(Loading, null) : suffix,\n    children,\n    disabled: loading || disabled\n  };\n}\n\nfunction Button(props, ref) {\n  const {\n    classList,\n    style,\n    onClick,\n    icon,\n    children,\n    disabled,\n    prefix,\n    suffix\n  } = parseProps(props);\n  return __jsx(\"button\", {\n    className: concat(...classList),\n    style: style,\n    onClick: onClick,\n    disabled: disabled\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, !!icon ? icon : children, !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null);\n}\n\nfunction ALink(props, ref) {\n  const {\n    classList,\n    style,\n    onClick,\n    icon,\n    children,\n    disabled,\n    prefix,\n    suffix\n  } = parseProps(props);\n  const {\n    href,\n    target,\n    rel,\n    linkType\n  } = props;\n  return __jsx(\"a\", {\n    ref: ref,\n    className: concat(...classList),\n    style: _objectSpread(_objectSpread({}, style), disabled ? {\n      pointerEvents: 'none',\n      opacity: 0.5\n    } : {}),\n    onClick: onClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type: linkType\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, !!icon ? icon : children, !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null);\n} // Next.js 的 Link  组件需要子组件可以接收 ref（用于修i该子元素的 href）\n\n\nexport default React.forwardRef(Button);\nexport const A = React.forwardRef(ALink);","map":null,"metadata":{},"sourceType":"module"}