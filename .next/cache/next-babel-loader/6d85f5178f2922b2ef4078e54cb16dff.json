{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Card from '@/components/card';\nimport Table from '@/components/table';\nimport Button from '@/components/button';\nimport Input from '@/components/input';\nimport Avatar from '@/components/avatar';\nimport Popover from '@/components/popover';\nimport Notification from '@/components/notification';\nimport { Search, Close, Success } from '@/components/svg';\nimport { Flex } from '@/components/container';\nimport { postDelete, users, reset_password } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport { waitUntil } from '@/utils/debounce';\nconst defaultSort = 'publish_time';\nconst defaultUp = false;\n\nclass AdminUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", value => {\n      waitUntil('users_search', () => {\n        this.setState({\n          search: value,\n          page: 1,\n          size: 10\n        }, this.getData);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"getData\", async () => {\n      this.setState({\n        loading: true\n      });\n      var r = await users(this.state.page, this.state.size, this.state.search, this.state.field, this.state.up ? 1 : -1);\n      this.setState({\n        total: r.total,\n        data: r.users,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onDelete\", async id => {\n      var r = await postDelete(id);\n      ShowNotification(r);\n      this.setState(state => ({\n        data: state.data.filter(post => post.id != id)\n      }));\n    });\n\n    _defineProperty(this, \"onTableChange\", (page, size, name, ascending) => {\n      this.setState({\n        page,\n        size,\n        field: name,\n        up: ascending\n      }, this.getData);\n    });\n\n    this.state = {\n      search: '',\n      search_fields: ['title'],\n      loading: false,\n      data: [],\n      total: 0,\n      size: 10,\n      page: 1,\n      with_tags: [],\n      without_tags: [],\n      field: defaultSort,\n      up: defaultUp\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const columns = [{\n      title: '头像',\n      key: 'avatar',\n      minWidth: 50,\n      maxWidth: 100,\n      render: value => __jsx(Avatar, {\n        src: value\n      })\n    }, {\n      title: '名称',\n      key: 'username',\n      minWidth: 50,\n      maxWidth: 100,\n      ellipsis: true,\n      tooltip: v => v,\n      render: value => __jsx(Link, {\n        href: \"/user/[username]\",\n        as: `/user/${value}`\n      }, value)\n    }, {\n      title: 'QQ',\n      key: 'qq',\n      minWidth: 50,\n      maxWidth: 100,\n      ellipsis: true,\n      tooltip: v => v\n    }, {\n      title: '邮箱',\n      key: 'email',\n      minWidth: 50,\n      maxWidth: 100,\n      ellipsis: true,\n      tooltip: v => v\n    }, {\n      title: '绑定 QQ',\n      key: 'qq_union_id',\n      minWidth: 50,\n      maxWidth: 100,\n      render: value => value === '' ? __jsx(Close, {\n        style: {\n          color: 'red'\n        }\n      }) : __jsx(Success, {\n        style: {\n          color: 'green'\n        }\n      })\n    }, {\n      title: '绑定 Github',\n      key: 'github_id',\n      minWidth: 50,\n      maxWidth: 100,\n      render: value => value === 0 ? __jsx(Close, {\n        style: {\n          color: 'red'\n        }\n      }) : __jsx(Success, {\n        style: {\n          color: 'green'\n        }\n      })\n    }, {\n      title: '操作',\n      key: 'op',\n      minWidth: 50,\n      maxWidth: 100,\n      render: (_, record) => __jsx(Popover, {\n        card: true,\n        shadow: true,\n        component: __jsx(Flex, null, __jsx(\"span\", null, \"\\u786E\\u5B9A\\u8981\\u91CD\\u7F6E\\u5BC6\\u7801\\uFF1F\"), __jsx(Button, {\n          danger: true,\n          primary: true,\n          neumorphism: true,\n          size: \"small\",\n          onClick: async () => {\n            const r = await reset_password(record.id);\n            Notification.message({\n              alertType: 'success',\n              title: '修改成功',\n              content: `新密码：${r.password}`,\n              autoClose: 0\n            });\n          }\n        }, \"\\u91CD\\u7F6E\"))\n      }, __jsx(Button, {\n        danger: true,\n        size: \"small\",\n        neumorphism: true\n      }, \"\\u91CD\\u7F6E\\u5BC6\\u7801\"))\n    }];\n    return __jsx(Card, {\n      neumorphism: true\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `用户列表|后台|${context.blog_name}`))), __jsx(Flex, {\n      direction: \"TB\",\n      fullWidth: true\n    }, __jsx(Input, {\n      placeholder: \"\\u641C\\u7D22\\u7528\\u6237\",\n      onChange: this.onChange,\n      prefix: __jsx(Search, null),\n      size: \"large\"\n    }), __jsx(Table, {\n      columns: columns,\n      data: this.state.data,\n      loading: this.state.loading,\n      onChange: this.onTableChange,\n      pagination: {\n        page: this.state.page,\n        total: this.state.total,\n        size: this.state.size,\n        sizeSelect: [5, 10, 20, 50, 100]\n      }\n    })));\n  }\n\n}\n\n_defineProperty(AdminUsers, \"defaultProps\", {});\n\nexport default AdminUsers;","map":null,"metadata":{},"sourceType":"module"}