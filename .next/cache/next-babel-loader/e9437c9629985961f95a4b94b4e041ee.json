{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './input.less';\nexport default function Input(props) {\n  const {\n    prefix,\n    suffix,\n    defaultValue,\n    value,\n    placeholder = '',\n    size = 'middle',\n    label = '',\n    autoFocus = false,\n    lablePlacement = 'left',\n    options = [],\n    selectTrigger = ['click'],\n    disabled = false,\n    editable = true,\n    onChange = () => {},\n    onSelect = () => {},\n    getValueCallback = () => {},\n    setValueCallback = () => {},\n    getSelectShow = () => {},\n    setSelectShow = () => {},\n    onEnterPressed = () => {},\n    onBlur,\n    hint,\n    type,\n    style,\n    className\n  } = props;\n  const ref = React.useRef();\n  React.useEffect(() => getValueCallback(() => ref.current.value), [ref, getValueCallback]);\n  React.useEffect(() => setValueCallback(value => ref.current.value = value), [ref, setValueCallback]);\n  const [show, setShow] = React.useState(false);\n  const click = React.useMemo(() => selectTrigger.indexOf('click') !== -1, [selectTrigger]);\n  const hover = React.useMemo(() => selectTrigger.indexOf('hover') !== -1, [selectTrigger]);\n  React.useEffect(() => setSelectShow(setShow), [setSelectShow, setShow]);\n  React.useEffect(() => getSelectShow(() => show), [getSelectShow, show]);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size]),\n    style: style,\n    onBlur: onBlur\n  }, !!label ? __jsx(\"div\", {\n    className: styles.label\n  }, label) : null, __jsx(\"div\", {\n    className: concat(styles.inner, ...(disabled ? ['disabled'] : []))\n  }, __jsx(\"div\", {\n    className: concat(styles.input, shadowStyles.neumorphism_inset)\n  }, !!prefix ? __jsx(\"span\", {\n    className: styles.prefix\n  }, prefix) : null, __jsx(\"input\", {\n    ref: ref,\n    defaultValue: !!value ? undefined : defaultValue,\n    value: value,\n    onChange: e => onChange(e.target.value),\n    placeholder: placeholder,\n    type: type,\n    style: {\n      paddingLeft: !!prefix ? '2em' : 0,\n      paddingRight: !!suffix ? '2em' : 0\n    },\n    onClick: () => {\n      if (click) setShow(true);\n    },\n    onMouseEnter: () => {\n      if (hover) setShow(true);\n    },\n    onMouseLeave: () => setShow(false),\n    readOnly: !editable,\n    onKeyUp: e => {\n      if (e.keyCode == 13 && !!onEnterPressed) onEnterPressed();\n    },\n    autoFocus: autoFocus\n  }), !!suffix ? __jsx(\"span\", {\n    className: styles.suffix\n  }, suffix) : null), options.length > 0 ? __jsx(\"div\", {\n    className: styles.select\n  }, __jsx(\"ul\", {\n    className: shadowStyles.neumorphism,\n    style: show ? {\n      opacity: 1,\n      visibility: 'visible'\n    } : {\n      opacity: 0,\n      visibility: 'hidden'\n    },\n    onMouseEnter: () => setShow(true),\n    onMouseLeave: () => setShow(false)\n  }, options.map((o, idx) => __jsx(\"li\", {\n    key: idx,\n    onClick: () => {\n      if (!disabled) {\n        onSelect(o.key, o.value);\n        setShow(false);\n      }\n    }\n  }, o.key)))) : null), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null);\n}","map":null,"metadata":{},"sourceType":"module"}