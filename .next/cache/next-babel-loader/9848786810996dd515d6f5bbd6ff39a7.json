{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nexport default function DragableRow(props) {\n  const ref = React.useRef();\n\n  const {\n    dragKey,\n    index,\n    onMove\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"dragKey\", \"index\", \"onMove\"]);\n\n  var {\n    style\n  } = props;\n\n  if (!!onMove) {\n    const type = dragKey;\n    const [{}, drop] = useDrop({\n      accept: type,\n      drop: item => {\n        if (!!onMove) onMove(item.index, index);\n        return item;\n      }\n    });\n    const [{}, drag] = useDrag({\n      item: {\n        type,\n        index\n      }\n    });\n    drop(drag(ref));\n    style = _objectSpread({\n      cursor: 'move'\n    }, style);\n  }\n\n  return /*#__PURE__*/_jsx(\"tr\", _objectSpread({\n    ref: ref,\n    style: style\n  }, restProps));\n}","map":null,"metadata":{},"sourceType":"module"}