{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Body from './body';\nimport { concat } from '@/utils/component';\nimport styles from './popover.less';\nimport shadowStyles from '@/styles/shadow.less';\nexport default function Popover(props) {\n  const {\n    placement = 'top',\n    trigger = ['hover'],\n    component,\n    className,\n    style,\n    popoverClass,\n    popoverStyle,\n    children,\n    closeDelay = 200,\n    arrow = true,\n    card = false,\n    shadow = false,\n    debug = false\n  } = props;\n  const ref = React.useRef();\n  const childRef = React.useRef();\n  const [pos, setPos] = React.useState({});\n  const [show, setShow] = React.useState(false); //   const [willClose, setWillClose] = React.useState(false);\n\n  const getPosition = React.useCallback(() => {\n    if (!ref.current || !childRef.current) return {\n      top: -99999,\n      left: -99999\n    };\n    const origin = ref.current.getBoundingClientRect();\n    const child = childRef.current.getBoundingClientRect();\n    return {\n      top: placement === 'top' ? origin.top + window.pageYOffset - child.height - 10 : placement === 'bottom' ? origin.top + window.pageYOffset + origin.height + 10 : origin.top + window.pageYOffset - (child.height - origin.height) / 2,\n      left: placement === 'left' ? origin.left + window.pageXOffset - child.width - 10 : placement === 'right' ? origin.left + window.pageXOffset + origin.width + 10 : origin.left + window.pageXOffset - (child.width - origin.width) / 2\n    };\n  }, [ref, childRef]);\n  const classList = React.useMemo(() => [styles.popover, arrow ? styles.arrow : '', styles[placement], popoverClass, show ? styles.show : '', card ? styles.card : '', shadow ? shadowStyles.shadow : ''], [placement, popoverClass, show, arrow, card, shadow]);\n  const click = React.useMemo(() => trigger.indexOf('click') !== -1, [trigger]);\n  const hover = React.useMemo(() => trigger.indexOf('hover') !== -1, [trigger]);\n  var willClose = false;\n\n  const moveIn = () => {\n    if (!show) setPos(getPosition());\n    setShow(true);\n    willClose = false;\n  };\n\n  const moveOut = () => {\n    if (debug) return;\n    willClose = true;\n    setTimeout(() => {\n      if (willClose) {\n        setPos({});\n        setShow(false);\n      }\n    }, closeDelay);\n  };\n\n  return __jsx(\"div\", {\n    ref: ref,\n    className: concat(styles.popover_origin, className),\n    style: style,\n    onClick: () => {\n      if (click) moveIn();\n    },\n    onMouseEnter: () => {\n      if (hover) moveIn();\n    },\n    onMouseLeave: moveOut\n  }, __jsx(Body, null, __jsx(\"div\", {\n    ref: childRef,\n    className: concat(...classList),\n    style: _objectSpread(_objectSpread({}, pos), popoverStyle),\n    onMouseEnter: moveIn,\n    onMouseLeave: moveOut\n  }, component)), children);\n}","map":null,"metadata":{},"sourceType":"module"}