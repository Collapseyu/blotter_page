{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Input from '../input';\nimport { Plus, Minus } from '@/components/svg';\nexport default function InputNumber(props) {\n  const {\n    value,\n    defaultValue = 0,\n    onChange,\n    getValueCallback = () => {},\n    setValueCallback = () => {},\n    max,\n    min\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"value\", \"defaultValue\", \"onChange\", \"getValueCallback\", \"setValueCallback\", \"max\", \"min\"]);\n\n  const [state, setState] = React.useState(defaultValue);\n  const nowValue = typeof value === 'undefined' ? state : value;\n  const onInputChange = React.useCallback(value => {\n    var num = parseFloat(value);\n    if (isNaN(num)) num = 0;\n    if (typeof max !== 'undefined' && num > max) num = max;\n    if (typeof min !== 'undefined' && num < min) num = min;\n    setState(num);\n    if (!!onChange) onChange(num);\n  }, [max, min, setState, onChange]);\n  React.useEffect(() => {\n    setValueCallback(value => {\n      setState(value);\n    });\n  }, [setState, setValueCallback]);\n  React.useEffect(() => {\n    getValueCallback(() => nowValue);\n  }, [nowValue, getValueCallback]);\n  return /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({}, restProps), {}, {\n    value: nowValue.toString(),\n    onChange: onInputChange,\n    prefix: /*#__PURE__*/_jsx(Minus, {\n      onClick: () => onInputChange((nowValue - 1).toString())\n    }),\n    suffix: /*#__PURE__*/_jsx(Plus, {\n      onClick: () => onInputChange((nowValue + 1).toString())\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}