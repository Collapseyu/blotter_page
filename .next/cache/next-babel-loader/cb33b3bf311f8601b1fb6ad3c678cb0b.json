{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Body extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"remove\", () => {});\n\n    _defineProperty(this, \"update\", _ => {});\n  }\n\n  componentDidMount() {\n    const {\n      remove,\n      update\n    } = Insert(() => this.props.children);\n    this.remove = remove;\n    this.update = update;\n  }\n\n  componentDidUpdate() {\n    this.update(this.props.children);\n  }\n\n  componentWillUnmount() {\n    this.remove();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nfunction Insert(renderChildren) {\n  /* \n        TODO:\n        在 Chrome 调试时，宽屏切换窄屏可能会导致这些用于插入元素的 div 占据空间，导致 body 宽度溢出\n        通常避免占位的解决办法应该是设置绝对定位，并定位至一个很大的负值，但是这会影响 Popover 的位置计算\n        该问题目前只有在调试工具切换屏幕大小时重现成功，暂时降低解决优先级\n    */\n  const bodyWrapper = document.createElement('div');\n  document.getElementById('blotter_root').appendChild(bodyWrapper);\n  const params = {\n    remove: () => document.getElementById('blotter_root').removeChild(bodyWrapper),\n    update: children => ReactDOM.render(children, bodyWrapper)\n  };\n  ReactDOM.render(renderChildren(params), bodyWrapper);\n  return params;\n}\n\nexport default Object.assign(Body, {\n  Insert\n});","map":null,"metadata":{},"sourceType":"module"}