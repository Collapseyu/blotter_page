{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Button from '@/components/button';\nimport { Flex } from '@/components/container';\nimport { Minus, Plus, Save, Image, Edit, Fold, Unfold, FullScreen, FullScreenExit } from '@/components/svg';\nimport { QiniuModal } from '@/components/upload';\nimport styles from './post.module.scss';\n\nfunction Press(props) {\n  const {\n    initArg,\n    onPressing = () => {},\n    ms = 500\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"initArg\", \"onPressing\", \"ms\"]);\n\n  const [value, setValue] = React.useState(0);\n  return __jsx(Button, _extends({}, restProps, {\n    onMouseDown: e => {\n      var arg = initArg;\n      clearInterval(value);\n      const interval = setInterval(() => {\n        arg = onPressing(arg);\n      }, ms);\n      setValue(interval);\n    },\n    onMouseUp: e => clearInterval(value)\n  }));\n}\n\nfunction RenderOffset(props) {\n  const {\n    onScrollOffset\n  } = props;\n  const diff = 10;\n  return __jsx(Flex, null, __jsx(Press, {\n    neumorphism: true,\n    size: \"small\",\n    initArg: -diff,\n    onClick: () => onScrollOffset(-diff),\n    onPressing: arg => {\n      onScrollOffset(arg - diff);\n      return arg - diff;\n    },\n    ms: 100,\n    icon: __jsx(Minus, null)\n  }), __jsx(Press, {\n    neumorphism: true,\n    size: \"small\",\n    initArg: diff,\n    onClick: () => onScrollOffset(diff),\n    onPressing: arg => {\n      onScrollOffset(arg + diff);\n      return arg + diff;\n    },\n    ms: 100,\n    icon: __jsx(Plus, null)\n  }));\n}\n\nfunction RenderImages() {\n  const [show, setShow] = React.useState(false);\n  return __jsx(React.Fragment, null, __jsx(QiniuModal, {\n    show: show,\n    onClose: () => setShow(false),\n    defaultTab: \"upload\"\n  }), __jsx(Button, {\n    circle: true,\n    danger: show,\n    neumorphism: true,\n    onClick: () => setShow(!show),\n    icon: __jsx(Image, null)\n  }));\n}\n\nfunction RenderPreviewButton(props) {\n  const previews = ['编辑', '预览', '双栏'];\n  const {\n    preview,\n    onPreviewClick\n  } = props;\n  return __jsx(Flex, {\n    direction: \"TB\",\n    mainSize: \"small\"\n  }, previews.map((item, idx) => __jsx(Button, {\n    key: idx,\n    neumorphism: true,\n    clicked: preview === idx,\n    size: \"small\",\n    onClick: () => onPreviewClick(idx)\n  }, item)));\n}\n\nfunction JumpButton() {\n  return __jsx(Button, {\n    circle: true,\n    neumorphism: true,\n    onClick: () => {\n      const editor = document.getElementById('editor');\n\n      if (!!editor) {\n        const top = editor.getBoundingClientRect().top + window.pageYOffset;\n\n        if (top > 0) {\n          scrollTo(0, top - 10);\n        }\n      }\n    },\n    icon: __jsx(Edit, null)\n  });\n}\n\nfunction FoldButtons(props) {\n  const {\n    onFold,\n    onUnfold\n  } = props;\n  return __jsx(Flex, null, __jsx(Button, {\n    neumorphism: true,\n    size: \"small\",\n    icon: __jsx(Fold, null),\n    onClick: onFold\n  }), __jsx(Button, {\n    neumorphism: true,\n    size: \"small\",\n    icon: __jsx(Unfold, null),\n    onClick: onUnfold\n  }));\n}\n\nexport default function RenderFixedButton(props) {\n  const {\n    preview,\n    onPreviewClick,\n    submitDisabled,\n    onSubmit,\n    onScrollOffset,\n    onFold,\n    onUnfold,\n    fullscreen,\n    onFullScreen\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"preview\", \"onPreviewClick\", \"submitDisabled\", \"onSubmit\", \"onScrollOffset\", \"onFold\", \"onUnfold\", \"fullscreen\", \"onFullScreen\"]);\n\n  return __jsx(Flex, _extends({}, restProps, {\n    direction: \"TB\",\n    className: styles.fixed_button\n  }), __jsx(RenderPreviewButton, {\n    preview: preview,\n    onPreviewClick: onPreviewClick\n  }), __jsx(RenderOffset, {\n    onScrollOffset: onScrollOffset\n  }), __jsx(FoldButtons, {\n    onFold: onFold,\n    onUnfold: onUnfold\n  }), __jsx(JumpButton, null), __jsx(Button, {\n    neumorphism: true,\n    loading: submitDisabled,\n    onClick: () => onFullScreen(!fullscreen),\n    circle: true,\n    icon: fullscreen ? __jsx(FullScreenExit, null) : __jsx(FullScreen, null)\n  }), __jsx(RenderImages, null), __jsx(Button, {\n    neumorphism: true,\n    loading: submitDisabled,\n    onClick: onSubmit,\n    circle: true,\n    icon: __jsx(Save, null),\n    primary: true\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}