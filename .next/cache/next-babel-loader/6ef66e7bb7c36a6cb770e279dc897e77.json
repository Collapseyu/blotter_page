{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Card from '@/components/card';\nimport { Tooltip } from '@/components/popover';\nimport Avatar from '@/components/avatar';\nimport { CheckBox } from '@/components/input';\nimport Button from '@/components/button';\nimport Pagination from '@/components/pagination';\nimport { Flex } from '@/components/container';\nimport Loading from '@/components/loading';\nimport { Context } from '@/utils/global';\nimport { commentsAdmin, commentSet } from '@/utils/api';\nimport moment from '@/utils/moment';\nimport ShowNotification from '@/utils/notification';\nimport { concat } from '@/utils/component';\nimport textStyles from '@/styles/text.module.scss';\nconst defaultAvatar = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\n\nfunction Comment(props) {\n  const {\n    comment\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"comment\"]);\n\n  const time = moment(comment.time);\n  return __jsx(Flex, _extends({}, restProps, {\n    subAxis: \"flex-start\",\n    wrap: false\n  }), __jsx(Flex.Item, {\n    style: {\n      flex: '0 0 2em',\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  }, __jsx(Avatar, {\n    src: comment.avatar ? comment.avatar : defaultAvatar,\n    style: {\n      width: '1.5em',\n      height: '1.5em'\n    }\n  })), __jsx(Flex.Item, {\n    style: {\n      flex: '1 1 auto'\n    }\n  }, __jsx(Flex, {\n    mainSize: \"small\",\n    direction: \"TB\",\n    fullWidth: true\n  }, __jsx(Flex, {\n    mainAxis: \"flex-start\"\n  }, comment.email, __jsx(Tooltip, {\n    title: time.format('YYYY-MM-DD HH:mm:ss')\n  }, __jsx(\"span\", {\n    className: concat(textStyles.secondary, textStyles.em75)\n  }, time.fromNow()))), !!comment.reply_comment && comment.reply_comment.id !== '000000000000000000000000' ? __jsx(\"div\", {\n    style: {\n      borderLeft: '#ccc 5px solid',\n      paddingLeft: 10\n    }\n  }, __jsx(Comment, {\n    comment: comment.reply_comment\n  })) : null, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: comment.content\n    }\n  }))));\n}\n\nclass AdminComments extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getData\", async () => {\n      this.setState({\n        loading: true\n      });\n      var r = await commentsAdmin(this.state.page, this.state.size);\n      this.setState({\n        data: r.comments,\n        total: r.total,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onChange\", (page, size) => {\n      this.setState({\n        page,\n        size\n      }, this.getData);\n    });\n\n    _defineProperty(this, \"checkboxChange\", (checked, id, key) => {\n      this.setState(state => {\n        var {\n          data\n        } = state;\n        data.map(item => {\n          if (item.id === id) {\n            item[key] = checked;\n          }\n\n          return item;\n        });\n        return {\n          data\n        };\n      });\n    });\n\n    this.state = {\n      loading: false,\n      total: 0,\n      data: [],\n      page: 1,\n      size: 10\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const items = [{\n      key: 'show',\n      value: '显示'\n    }, {\n      key: 'ad',\n      value: '广告'\n    }, {\n      key: 'recv',\n      value: '接收提醒'\n    }];\n    return __jsx(Card, {\n      neumorphism: true\n    }, __jsx(Context.Consumer, null, context => __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, `评论列表|后台|${context.blog_name}`)), __jsx(Flex, {\n      fullWidth: true,\n      direction: \"TB\"\n    }, __jsx(\"p\", null, \"\\u5171 \", this.state.total, \" \\u6761\\u8BC4\\u8BBA\"), __jsx(Loading, {\n      loading: this.state.loading\n    }, this.state.data.map((comment, idx) => __jsx(Flex, {\n      key: comment.id,\n      mainAxis: \"space-between\",\n      wrap: !context.big_screen\n    }, __jsx(Flex.Item, {\n      style: {\n        flex: '1 1 auto'\n      }\n    }, __jsx(Comment, {\n      comment: comment\n    })), __jsx(Flex.Item, {\n      style: {\n        flex: '0 0 auto'\n      }\n    }, __jsx(Flex, {\n      direction: \"TB\",\n      subAxis: \"flex-end\"\n    }, __jsx(\"a\", {\n      href: comment.url,\n      target: \"_blank\"\n    }, \"\\u300A\", comment.title !== '' ? comment.title : '评论区', \"\\u300B\"), __jsx(Flex, null, items.map(item => __jsx(CheckBox, {\n      value: comment[item.key],\n      onChange: c => this.setState(state => {\n        var {\n          data\n        } = state;\n        data[idx][item.key] = c;\n        return {\n          data: [...data]\n        };\n      })\n    }, item.value))), __jsx(Button, {\n      neumorphism: true,\n      onClick: async e => {\n        const r = await commentSet(comment.id, comment.ad, comment.recv, comment.show);\n        ShowNotification(r);\n      }\n    }, \"\\u4FDD\\u5B58\")))))), __jsx(Pagination, {\n      disabled: this.state.loading,\n      sizeSelect: [5, 10, 20, 50, 100],\n      page: this.state.page,\n      size: this.state.size,\n      total: this.state.total,\n      onChange: this.onChange\n    })))));\n  }\n\n}\n\n_defineProperty(AdminComments, \"defaultProps\", {});\n\nexport default AdminComments;","map":null,"metadata":{},"sourceType":"module"}