{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nexport default function JS(props) {\n  const {\n    js,\n    children\n  } = props;\n  React.useEffect(() => {\n    try {\n      eval(js);\n    } catch (e) {\n      console.warn(e);\n    }\n  }, []);\n  return children;\n}\nexport function AD(props) {\n  const {\n    setting\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"setting\"]);\n\n  const {\n    js,\n    html\n  } = React.useMemo(() => splitJS(setting), [setting]);\n  return __jsx(JS, {\n    js: js\n  }, __jsx(\"div\", _extends({}, restProps, {\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  })));\n}\nexport function splitJS(text) {\n  var re = new RegExp(`<script.*?>(.*?)<\\/script>`, 'g');\n  var js = [];\n  var html = [];\n  var pos = 0;\n\n  do {\n    var result = re.exec(text);\n\n    if (result !== null) {\n      js.push(result[1]);\n      html.push(text.slice(pos, result.index));\n      pos = result.index + result[0].length;\n    } else {\n      html.push(text.slice(pos));\n    }\n  } while (result);\n\n  return {\n    js: js.join('\\n'),\n    html: html.join('\\n')\n  };\n}","map":null,"metadata":{},"sourceType":"module"}