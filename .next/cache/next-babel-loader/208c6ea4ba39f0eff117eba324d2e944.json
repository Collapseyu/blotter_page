{"ast":null,"code":"import _defineProperty from \"/github/workspace/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/github/workspace/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { concat } from '@/utils/component';\nimport styles from './loading.module.scss';\nexport default function Loading(props) {\n  var _props$count = props.count,\n      count = _props$count === void 0 ? 5 : _props$count,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? true : _props$loading,\n      className = props.className,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, [\"count\", \"loading\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n    className: concat(styles.wrapper, loading ? styles.onloading : '', className)\n  }, restProps), {}, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.loading,\n      children: Array(count).fill(0).map(function (_, idx) {\n        return /*#__PURE__*/_jsx(\"span\", {\n          style: {\n            animationDelay: \"\".concat(idx * 0.2, \"s\")\n          }\n        }, idx);\n      })\n    }), children && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.inner,\n      children: children\n    })]\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}