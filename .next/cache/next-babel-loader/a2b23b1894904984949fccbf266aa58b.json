{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Context } from '@/utils/global';\nimport { ControlledEditor } from '@monaco-editor/react/lib/';\nexport function Editor(props) {\n  var onChange = props.onChange,\n      getRef = props.getRef,\n      restProps = _objectWithoutProperties(props, [\"onChange\", \"getRef\"]);\n\n  var handleEditorChange = function handleEditorChange(ev, value) {\n    return onChange(value);\n  };\n\n  return __jsx(ControlledEditor, _extends({\n    onChange: handleEditorChange\n  }, restProps, {\n    editorDidMount: function editorDidMount(_, editor) {\n      return getRef(editor);\n    }\n  }));\n}\nexport default function RenderEditor(props) {\n  var raw = props.raw,\n      fontSize = props.fontSize,\n      _getRef = props.getRef,\n      onSave = props.onSave,\n      onScoll = props.onScoll,\n      onChange = props.onChange;\n  var context = React.useContext(Context);\n  var opts = {\n    fontSize: fontSize,\n    wordWrap: 'on',\n    quickSuggestions: false,\n    acceptSuggestionOnCommitCharacter: false,\n    acceptSuggestionOnEnter: 'off',\n    snippetSuggestions: 'none'\n  };\n  return __jsx(Editor, {\n    language: \"markdown\",\n    theme: context.theme == 'default' ? 'light' : 'dark',\n    getRef: function getRef(ref) {\n      _getRef(ref);\n\n      ref.onDidScrollChange(onScoll); // Save post when Ctrl + S clicked\n\n      ref.addCommand(2097, onSave);\n      if (raw !== '') ref.setValue(raw);\n    },\n    options: opts,\n    onChange: onChange\n  });\n}","map":null,"metadata":{},"sourceType":"module"}