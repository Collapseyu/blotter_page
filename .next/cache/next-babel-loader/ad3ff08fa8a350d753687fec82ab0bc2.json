{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { Flex } from '@/components/container';\nimport { Edit, Plus, Delete, Image } from '@/components/svg';\nimport TagPart from '@/components/tag';\nimport { QiniuModal } from '@/components/upload';\nimport Table from '@/components/table';\nimport Button from '@/components/button';\nimport Input, { TextArea } from '@/components/input';\nimport Popover from '@/components/popover';\nimport Card from '@/components/card';\nimport { Context } from '@/utils/global';\nimport { adminTags, tagDelete, tagEdit } from '@/utils/api';\nimport ShowNotification from '@/utils/notification';\nimport { waitUntil } from '@/utils/debounce';\nimport randomString from '@/utils/random';\nconst defaultSortField = 'count';\nconst defaultSortInc = false;\n\nclass AdminTagList extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"getData\", async (keyword, size, page = 1, field = defaultSortField, up = defaultSortInc) => {\n      this.setState({\n        loading: true,\n        page,\n        size\n      });\n      var r = await adminTags(keyword, page, size, field, up);\n      this.setState({\n        data: r.tags,\n        total: r.total,\n        loading: false,\n        sortField: field,\n        sortAscending: up\n      });\n    });\n\n    _defineProperty(this, \"renderEditableCell\", (idx, key, textarea = false) => {\n      const props = {\n        transform: true,\n        value: this.state.data[idx][key],\n        onChange: value => {\n          this.setState(state => {\n            var {\n              data\n            } = state;\n            data[idx][key] = value;\n            return {\n              data\n            };\n          });\n        }\n      };\n      return textarea ? __jsx(TextArea, props) : __jsx(Input, props);\n    });\n\n    _defineProperty(this, \"columns\", [{\n      title: '名称',\n      key: 'name',\n      tooltip: text => text,\n      sorter: true,\n      minWidth: '5em',\n      maxWidth: '10em',\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'name')\n    }, {\n      title: '链接',\n      key: 'short',\n      tooltip: text => text,\n      sorter: true,\n      minWidth: '5em',\n      maxWidth: '10em',\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'short')\n    }, {\n      title: '图标',\n      key: 'icon',\n      tooltip: text => text,\n      sorter: true,\n      minWidth: '5em',\n      maxWidth: '10em',\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'icon')\n    }, {\n      title: '颜色',\n      key: 'color',\n      tooltip: text => text,\n      sorter: true,\n      minWidth: '5em',\n      maxWidth: '10em',\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'color')\n    }, {\n      title: '预览',\n      key: 'view',\n      minWidth: '10em',\n      maxWidth: '20em',\n      render: (_, record, __) => __jsx(TagPart, {\n        tag: record\n      })\n    }, {\n      title: '文章个数',\n      key: 'count',\n      tooltip: true,\n      minWidth: '6em',\n      maxWidth: '12em',\n      ellipsis: true\n    }, {\n      title: '操作',\n      key: 'op',\n      minWidth: '12em',\n      maxWidth: '15em',\n      headStyle: {\n        textAlign: 'center'\n      },\n      render: (_, record, idx) => __jsx(Flex, {\n        mainAxis: \"space-around\"\n      }, __jsx(Button, {\n        size: \"small\",\n        onClick: () => this.onEdit(idx),\n        neumorphism: true,\n        prefix: __jsx(Edit, null)\n      }, \"\\u4FEE\\u6539\"), __jsx(Popover, {\n        shadow: true,\n        card: true,\n        trigger: ['click'],\n        component: __jsx(Card, null, __jsx(\"span\", null, \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\"), __jsx(Button, {\n          onClick: () => {\n            this.onDelete(record.id);\n          },\n          size: \"small\",\n          danger: true,\n          neumorphism: true,\n          primary: true\n        }, \"\\u5220\\u9664\\uFF01\"))\n      }, __jsx(Button, {\n        size: \"small\",\n        danger: true,\n        neumorphism: true,\n        prefix: __jsx(Delete, null)\n      }, \"\\u5220\\u9664\")))\n    }]);\n\n    _defineProperty(this, \"onInsert\", () => {\n      this.setState(state => {\n        var data = state.data;\n        data.unshift({\n          id: '',\n          name: randomString(),\n          short: randomString(),\n          color: '',\n          icon: '',\n          count: 0,\n          description: ''\n        });\n        data = data.map(d => d);\n        return {\n          data\n        };\n      });\n    });\n\n    _defineProperty(this, \"onEdit\", async idx => {\n      var tag = this.state.data[idx];\n      var r = await tagEdit(tag.id, tag.name, tag.short, tag.color, tag.icon, tag.description);\n      ShowNotification(r);\n    });\n\n    _defineProperty(this, \"onDelete\", async id => {\n      var r = await tagDelete(id);\n      ShowNotification(r);\n      this.setState(state => ({\n        data: state.data.filter(tag => tag.id != id)\n      }));\n    });\n\n    _defineProperty(this, \"searchOnChange\", value => {\n      waitUntil('admin_tags_search', () => {\n        this.setState(state => {\n          return {\n            page: 1,\n            keyword: value\n          };\n        });\n        this.getData(value, this.state.size);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"renderImages\", () => {\n      return __jsx(React.Fragment, null, __jsx(QiniuModal, {\n        show: this.state.upload,\n        onClose: () => this.setState({\n          upload: false\n        }),\n        defaultTab: \"upload\"\n      }), __jsx(Button, {\n        circle: true,\n        size: \"large\",\n        primary: true,\n        danger: this.state.upload,\n        neumorphism: true,\n        style: {\n          position: 'fixed',\n          right: 20,\n          top: 50,\n          zIndex: 2\n        },\n        onClick: () => this.setState(state => ({\n          upload: !state.upload\n        })),\n        icon: __jsx(Image, null)\n      }));\n    });\n\n    this.state = {\n      loading: false,\n      data: [],\n      total: 0,\n      page: 1,\n      size: 10,\n      keyword: '',\n      upload: false,\n      sortField: 'count',\n      sortAscending: false\n    };\n  }\n\n  componentDidMount() {\n    this.getData('', 10);\n  }\n\n  render() {\n    return __jsx(Card, null, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `标签列表|后台|${context.blog_name}`))), this.renderImages(), __jsx(Flex, {\n      subSize: \"middle\"\n    }, __jsx(Flex.Item, {\n      style: {\n        flex: '1 1 auto'\n      }\n    }, __jsx(Input, {\n      placeholder: \"\\u641C\\u7D22\\u6807\\u7B7E\",\n      onChange: this.searchOnChange\n    })), __jsx(Button, {\n      primary: true,\n      onClick: this.onInsert,\n      neumorphism: true,\n      prefix: __jsx(Plus, null)\n    }, \"\\u65B0\\u5EFA\\u6807\\u7B7E\")), __jsx(Table, {\n      //   rowKey={(record) => record.id}\n      columns: this.columns //   scroll={{ x: true }}\n      ,\n      data: this.state.data,\n      loading: this.state.loading //   onChange={}\n      ,\n      expand: (_, idx) => this.renderEditableCell(idx, 'description', true),\n      pagination: {\n        page: this.state.page,\n        size: this.state.size,\n        total: this.state.total,\n        sizeSelect: [10, 20, 30, 40, 50]\n      },\n      onChange: (page, size, name, ascending) => {\n        this.getData(this.state.keyword, size, page, !!name ? name : defaultSortField, !!name ? ascending : defaultSortInc);\n      }\n    }));\n  }\n\n}\n\n_defineProperty(AdminTagList, \"defaultProps\", {});\n\nexport default AdminTagList;","map":null,"metadata":{},"sourceType":"module"}