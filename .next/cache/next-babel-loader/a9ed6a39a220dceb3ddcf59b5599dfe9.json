{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { Flex } from '@/components/container';\nimport PostList from '@/components/post_list';\nimport Input, { CheckBox } from '@/components/input';\nimport { Search } from '@/components/svg';\nimport { Context } from '@/utils/global';\nimport { indexPosts, tagsSearch } from '@/utils/api';\nimport { waitUntil } from '@/utils/debounce';\nimport TagPart from '@/components/tag';\nimport TagSearch from '@/components/tag_search';\nimport Card from '@/components/card';\nimport Button from '@/components/button';\n\nclass Index extends React.Component {\n  static async getInitialProps(args) {\n    var data = await indexPosts('', [], 1, 10, [], []);\n    return {\n      posts: data.posts\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", value => {\n      waitUntil('index_search', () => {\n        this.setState({\n          search: value,\n          page: 1\n        }, this.getPosts);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"onPageChange\", (page, size) => {\n      if (typeof size === 'undefined') {\n        size = this.state.size;\n      }\n\n      this.setState({\n        page,\n        size\n      }, this.getPosts);\n    });\n\n    _defineProperty(this, \"getPosts\", async () => {\n      if (this.state.search == '' && this.state.with_tags.length == 0 && this.state.without_tags.length == 0) {\n        this.setState({\n          posts: this.props.posts,\n          total: 0,\n          search: '',\n          callback: undefined,\n          tags: []\n        });\n      } else {\n        this.setState({\n          loading: true\n        });\n        var data = await indexPosts(this.state.search, this.state.search_fields, this.state.page, this.state.size, this.state.with_tags, this.state.without_tags);\n        var tags = [];\n\n        if (this.state.search !== '') {\n          tags = await (await tagsSearch(this.state.search)).tags;\n        }\n\n        this.setState({\n          posts: data.posts,\n          total: data.total,\n          loading: false,\n          callback: this.onPageChange,\n          tags: tags\n        });\n      }\n    });\n\n    _defineProperty(this, \"renderTagSearch\", name => {\n      return __jsx(TagSearch, {\n        tags: this.state[name],\n        onAdd: tag => {\n          console.log(tag);\n          this.setState(state => {\n            var tags = state[name];\n            tags = tags.filter(item => item.id !== tag.id);\n            tags.push(tag);\n            return _objectSpread(_objectSpread({}, state), {}, {\n              page: 1,\n              [name]: tags\n            });\n          }, this.getPosts);\n        },\n        onDelete: tag => {\n          this.setState(state => {\n            var tags = state[name];\n            tags = tags.filter(item => item.id !== tag.id);\n            return _objectSpread(_objectSpread({}, state), {}, {\n              page: 1,\n              [name]: tags\n            });\n          }, this.getPosts);\n        }\n      });\n    });\n\n    _defineProperty(this, \"renderSearch\", () => {\n      const checkboxs = [{\n        key: 'title',\n        name: '标题'\n      }, {\n        key: 'abstract',\n        name: '摘要'\n      }, {\n        key: 'raw',\n        name: '内容'\n      }];\n      return __jsx(Flex, {\n        direction: \"TB\",\n        fullWidth: true,\n        subAxis: \"flex-start\"\n      }, __jsx(Input, {\n        style: {\n          width: '100%'\n        },\n        placeholder: \"\\u641C\\u7D22\\u6587\\u7AE0\",\n        onChange: this.onChange,\n        prefix: __jsx(Search, null),\n        size: \"large\"\n      }), __jsx(Flex, {\n        mainAxis: \"flex-start\"\n      }, ['搜索范围', ...checkboxs.map(item => __jsx(CheckBox, {\n        key: item.key,\n        value: this.state.search_fields.indexOf(item.key) !== -1,\n        onChange: checked => {\n          this.setState(state => {\n            var {\n              search_fields\n            } = state;\n            search_fields = search_fields.filter(it => it != item.key);\n\n            if (checked) {\n              search_fields.push(item.key);\n            }\n\n            return {\n              search_fields\n            };\n          }, this.getPosts);\n        }\n      }, item.name))]), __jsx(Flex, {\n        mainAxis: \"flex-start\",\n        mainSize: \"small\",\n        subSize: \"small\"\n      }, __jsx(\"span\", null, \"\\u4ECE\\u8FD9\\u4E9B\\u6807\\u7B7E\\u91CC\\u641C\\u7D22\\uFF1A\"), this.renderTagSearch('with_tags')), __jsx(Flex, {\n        mainAxis: \"flex-start\",\n        mainSize: \"small\",\n        subSize: \"small\"\n      }, __jsx(\"span\", null, \"\\u4ECE\\u8FD9\\u4E9B\\u6807\\u7B7E\\u91CC\\u6392\\u9664\\uFF1A\"), this.renderTagSearch('without_tags')), __jsx(Flex, {\n        mainAxis: \"flex-start\",\n        subSize: \"middle\"\n      }, this.state.tags.map(tag => __jsx(TagPart, {\n        tag: tag,\n        key: tag.short\n      }))));\n    });\n\n    this.state = {\n      posts: this.props.posts,\n      total: 0,\n      loading: false,\n      page: 1,\n      size: 10,\n      search: '',\n      search_fields: ['title'],\n      tags: [],\n      with_tags: [],\n      without_tags: []\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `首页|${context.blog_name}`))), __jsx(Flex, {\n      direction: \"TB\",\n      fullWidth: true\n    }, __jsx(Card, {\n      neumorphism: true,\n      style: {\n        lineHeight: '2em'\n      }\n    }, this.renderSearch()), __jsx(PostList, {\n      posts: this.state.posts,\n      header: this.state.total == 0 ? undefined : `共 ${this.state.total} 条搜索结果`,\n      loading: this.state.loading,\n      page: this.state.page,\n      size: this.state.size,\n      total: this.state.total,\n      callback: this.state.callback\n    }), __jsx(\"div\", {\n      className: \"textCenter\"\n    }, __jsx(Link, {\n      href: \"/archives?page=2&size=10\"\n    }, __jsx(Button, {\n      neumorphism: true\n    }, \"\\u67E5\\u770B\\u66F4\\u591A\")))));\n  }\n\n}\n\n_defineProperty(Index, \"defaultProps\", {\n  posts: []\n});\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}