{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport TagPart from '@/components/tag';\nimport Input from '@/components/input';\nimport Button from '@/components/button';\nimport { Loading } from '@/components/svg';\nimport { Flex } from '@/components/container';\nimport { tagsSearch } from '@/utils/api';\nimport { waitUntil } from '@/utils/debounce';\n\nclass TagSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onClick\", () => {\n      this.setState({\n        inputVisible: true\n      });\n    });\n\n    _defineProperty(this, \"onSelect\", (_, tag) => {\n      console.log('onChange', tag);\n\n      if (typeof tag !== 'undefined') {\n        this.add(tag);\n      }\n    });\n\n    _defineProperty(this, \"onChange\", value => {\n      if (value != '') {\n        waitUntil('search_tags', () => {\n          this.setState({\n            loading: true\n          });\n          tagsSearch(value).then(r => this.setState({\n            options: r.tags\n          })).finally(() => this.setState({\n            loading: false\n          }));\n        }, 1000);\n      }\n    });\n\n    _defineProperty(this, \"add\", tag => {\n      this.props.onAdd(tag);\n      this.setState({\n        inputVisible: false,\n        options: []\n      });\n    });\n\n    _defineProperty(this, \"onBlur\", () => {\n      setTimeout(() => {\n        this.setState({\n          inputVisible: false\n        });\n      }, 1000);\n    });\n\n    _defineProperty(this, \"renderInput\", () => {\n      return this.state.inputVisible ? /*#__PURE__*/_jsx(Input, {\n        placeholder: \"\\u641C\\u7D22\\u6807\\u7B7E\",\n        style: {\n          width: '150px'\n        },\n        onBlur: this.onBlur,\n        size: \"small\",\n        onChange: this.onChange,\n        onSelect: this.onSelect,\n        selectTrigger: ['click', 'hover'],\n        options: this.state.options.map(tag => ({\n          key: tag.name,\n          value: tag\n        })),\n        suffix: this.state.loading && /*#__PURE__*/_jsx(Loading, {}),\n        autoFocus: true\n      }) : /*#__PURE__*/_jsx(Button, {\n        size: \"small\",\n        onClick: this.onClick,\n        style: {\n          border: '1px dashed var(--primary)',\n          transition: 'border var(--primary)'\n        },\n        children: \"\\u65B0\\u6807\\u7B7E\"\n      });\n    });\n\n    this.state = {\n      inputVisible: false,\n      options: [],\n      loading: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(Flex, {\n      mainSize: \"small\",\n      subSize: \"small\",\n      mainAxis: \"flex-start\",\n      children: [...this.props.tags.map(tag => /*#__PURE__*/_jsx(TagPart, {\n        tag: tag,\n        onClose: () => this.props.onDelete(tag)\n      }, tag.short)), /*#__PURE__*/_jsx(Flex.Item, {\n        children: this.renderInput()\n      }, 'tag_search')]\n    });\n  }\n\n}\n\nexport default TagSearch;","map":null,"metadata":{},"sourceType":"module"}