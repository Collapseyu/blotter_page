{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Context } from '@/utils/global';\nimport MonacoEditor from '@monaco-editor/react/lib/';\nexport function Editor(props) {\n  const {\n    onChange,\n    getRef\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"onChange\", \"getRef\"]);\n\n  return __jsx(MonacoEditor //   onChange={handleEditorChange}\n  , _extends({}, restProps, {\n    editorDidMount: (_, editor) => {\n      getRef(editor);\n      if (onChange) editor.onDidChangeModelContent(onChange);\n    }\n  }));\n}\nexport default function RenderEditor(props) {\n  const {\n    raw,\n    fontSize,\n    getRef,\n    onSave,\n    onScoll,\n    onChange\n  } = props;\n  const context = React.useContext(Context);\n  const opts = {\n    fontSize,\n    wordWrap: 'on',\n    quickSuggestions: false,\n    acceptSuggestionOnCommitCharacter: false,\n    acceptSuggestionOnEnter: 'off',\n    snippetSuggestions: 'none'\n  };\n  return __jsx(Editor, {\n    language: \"markdown\",\n    theme: context.theme == 'default' ? 'light' : 'dark',\n    getRef: ref => {\n      getRef(ref);\n      ref.onDidScrollChange(onScoll); // Save post when Ctrl + S clicked\n\n      ref.addCommand(2097, onSave);\n      if (raw !== '') ref.setValue(raw);\n    },\n    options: opts,\n    onChange: onChange\n  });\n}","map":null,"metadata":{},"sourceType":"module"}