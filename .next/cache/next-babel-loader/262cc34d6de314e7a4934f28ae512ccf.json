{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Button from '@/components/button';\nimport { Plus, Close } from '@/components/svg';\nimport Input, { InputNumber, CheckBox, TextArea } from '@/components/input';\nimport { Flex } from '@/components/container';\nimport Popover from '@/components/popover';\nimport randomString from '@/utils/random';\nimport { waitUntil } from '@/utils/debounce';\nimport hash from '@/utils/hash';\nimport styles from './dynamic.module.scss';\nconst stringLength = 20;\n\nconst DragItem = props => {\n  const ref = React.useRef();\n  const [{}, drop] = useDrop({\n    accept: props.id,\n    drop: item => {\n      props.swap(item['index'], props.index);\n      return item;\n    }\n  });\n  const [{}, drag] = useDrag({\n    item: {\n      type: props.id,\n      index: props.index\n    }\n  });\n  drop(drag(ref));\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    children: props.children\n  });\n};\n\nconst Menu = callback => /*#__PURE__*/_jsxs(\"ul\", {\n  className: styles.menus,\n  children: [/*#__PURE__*/_jsx(\"li\", {\n    onClick: () => callback(randomString()),\n    children: \"\\u6587\\u672C\\u6846\"\n  }), /*#__PURE__*/_jsx(\"li\", {\n    onClick: () => callback(randomString(stringLength)),\n    children: \"\\u591A\\u884C\\u6587\\u672C\\u6846\"\n  }), /*#__PURE__*/_jsx(\"li\", {\n    onClick: () => callback(false),\n    children: \"\\u591A\\u9009\\u6846\"\n  }), /*#__PURE__*/_jsx(\"li\", {\n    onClick: () => callback(0),\n    children: \"\\u6570\\u5B57\\u6846\"\n  }), /*#__PURE__*/_jsx(\"li\", {\n    onClick: () => callback([]),\n    children: \"\\u5217\\u8868\"\n  }), /*#__PURE__*/_jsx(\"li\", {\n    onClick: () => callback({}),\n    children: \"\\u5BF9\\u8C61\"\n  })]\n});\n\nconst InputField = props => {\n  const id = React.useMemo(() => randomString(), []);\n  return /*#__PURE__*/_jsx(Input, {\n    defaultValue: props.value,\n    onChange: value => {\n      waitUntil(id, () => props.callback(value), 1000);\n    },\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst CheckField = props => {\n  const id = React.useMemo(() => randomString(), []);\n  return /*#__PURE__*/_jsx(CheckBox, {\n    value: props.value,\n    onChange: value => {\n      waitUntil(id, () => props.callback(value), 1000);\n    }\n  });\n};\n\nconst AreaField = props => {\n  const id = React.useMemo(() => randomString(), []);\n  return /*#__PURE__*/_jsx(TextArea, {\n    defaultValue: props.value,\n    onChange: value => {\n      waitUntil(id, () => props.callback(value), 1000);\n    }\n  });\n};\n\nconst NumberField = props => {\n  const id = React.useMemo(() => randomString(), []);\n  return /*#__PURE__*/_jsx(InputNumber, {\n    defaultValue: props.value,\n    onChange: value => {\n      waitUntil(id, () => props.callback(value), 1000);\n    }\n  });\n};\n\nconst ArrayField = props => {\n  const id = React.useMemo(() => randomString(), []);\n  return /*#__PURE__*/_jsxs(Flex, {\n    fullWidth: true,\n    direction: \"TB\",\n    subAxis: \"flex-end\",\n    children: [/*#__PURE__*/_jsx(Flex, {\n      fullWidth: true,\n      direction: \"TB\",\n      children: props.value.map((item, idx) => /*#__PURE__*/_jsx(DragItem, {\n        id: id,\n        index: idx,\n        swap: (i, j) => {\n          var v = props.value;\n          const temp = v[i];\n          v[i] = v[j];\n          v[j] = temp;\n          props.callback(v);\n        },\n        children: /*#__PURE__*/_jsxs(Flex, {\n          children: [/*#__PURE__*/_jsx(Flex.Item, {\n            style: {\n              flex: '1 1 auto'\n            },\n            children: /*#__PURE__*/_jsx(DynamicForm, {\n              value: item,\n              callback: value => {\n                var v = props.value;\n                v[idx] = value;\n                props.callback(v);\n              }\n            }, hash(item))\n          }), /*#__PURE__*/_jsx(Flex.Item, {\n            style: {\n              flex: '0 0 auto'\n            },\n            children: /*#__PURE__*/_jsx(Button, {\n              danger: true,\n              neumorphism: true,\n              circle: true,\n              icon: /*#__PURE__*/_jsx(Close, {}),\n              onClick: () => {\n                var v = props.value.filter((_, i) => i !== idx);\n                props.callback(v);\n              }\n            })\n          })]\n        })\n      }, idx))\n    }), /*#__PURE__*/_jsx(Flex.Item, {\n      style: {\n        width: 'unset'\n      },\n      children: /*#__PURE__*/_jsx(Popover, {\n        card: true,\n        shadow: true,\n        component: Menu(newValue => {\n          var v = props.value;\n          v.push(newValue);\n          props.callback(v);\n        }),\n        children: /*#__PURE__*/_jsx(Button, {\n          neumorphism: true,\n          prefix: /*#__PURE__*/_jsx(Plus, {}),\n          children: \"\\u65B0\\u5EFA\\u4E00\\u9879\\u5143\\u7D20\"\n        })\n      })\n    })]\n  });\n};\n\nconst ObjectField = props => {\n  const id = React.useMemo(() => randomString(), []);\n  const slice = Object.keys(props.value).map(key => ({\n    key: key,\n    value: props.value[key]\n  }));\n  return /*#__PURE__*/_jsxs(Flex, {\n    fullWidth: true,\n    direction: \"TB\",\n    subAxis: \"flex-end\",\n    children: [/*#__PURE__*/_jsx(Flex, {\n      fullWidth: true,\n      direction: \"TB\",\n      children: slice.map(item => /*#__PURE__*/_jsxs(Flex, {\n        subAxis: \"flex-start\",\n        children: [/*#__PURE__*/_jsx(Flex.Item, {\n          style: {\n            flex: '0 0 30%'\n          },\n          children: /*#__PURE__*/_jsx(DynamicForm, {\n            value: item.key,\n            callback: value => {\n              var obj = {};\n\n              for (var key in props.value) {\n                if (key == item.key) {\n                  obj[value] = props.value[key];\n                } else {\n                  obj[key] = props.value[key];\n                }\n              }\n\n              props.callback(obj);\n            }\n          })\n        }), /*#__PURE__*/_jsx(Flex.Item, {\n          style: {\n            flex: '1 1 auto'\n          },\n          children: /*#__PURE__*/_jsx(DynamicForm, {\n            value: item.value,\n            callback: value => {\n              var v = props.value;\n              v[item.key] = value;\n              props.callback(v);\n            }\n          })\n        }), /*#__PURE__*/_jsx(Flex.Item, {\n          style: {\n            flex: '0 0 auto'\n          },\n          children: /*#__PURE__*/_jsx(Button, {\n            neumorphism: true,\n            danger: true,\n            circle: true,\n            icon: /*#__PURE__*/_jsx(Close, {}),\n            onClick: () => {\n              var v = props.value;\n              delete v[item.key];\n              props.callback(v);\n            }\n          })\n        })]\n      }, hash(item.key)))\n    }), /*#__PURE__*/_jsx(Flex.Item, {\n      style: {\n        width: 'unset'\n      },\n      children: /*#__PURE__*/_jsx(Popover, {\n        card: true,\n        shadow: true,\n        component: Menu(newValue => {\n          var v = props.value;\n          v[randomString()] = newValue;\n          props.callback(v);\n        }),\n        children: /*#__PURE__*/_jsx(Button, {\n          neumorphism: true,\n          prefix: /*#__PURE__*/_jsx(Plus, {}),\n          children: \"\\u65B0\\u5EFA\\u4E00\\u6761\\u5C5E\\u6027\"\n        })\n      })\n    })]\n  });\n};\n\nconst DynamicForm = props => {\n  var child = /*#__PURE__*/_jsx(InputField, {\n    value: props.value,\n    callback: props.callback\n  });\n\n  switch (typeof props.value) {\n    case 'string':\n      if (props.value.length > stringLength) {\n        child = /*#__PURE__*/_jsx(AreaField, {\n          value: props.value,\n          callback: props.callback\n        });\n      } else {\n        child = /*#__PURE__*/_jsx(InputField, {\n          value: props.value,\n          callback: props.callback\n        });\n      }\n\n      break;\n\n    case 'number':\n      child = /*#__PURE__*/_jsx(NumberField, {\n        value: props.value,\n        callback: props.callback\n      });\n      break;\n\n    case 'object':\n      if (Array.isArray(props.value)) {\n        child = /*#__PURE__*/_jsx(ArrayField, {\n          value: props.value,\n          callback: props.callback\n        });\n      } else {\n        child = /*#__PURE__*/_jsx(ObjectField, {\n          value: props.value,\n          callback: props.callback\n        });\n      }\n\n      break;\n\n    case 'boolean':\n      child = /*#__PURE__*/_jsx(CheckField, {\n        value: props.value,\n        callback: props.callback\n      });\n      break;\n  }\n\n  return child;\n};\n\nexport default DynamicForm;","map":null,"metadata":{},"sourceType":"module"}