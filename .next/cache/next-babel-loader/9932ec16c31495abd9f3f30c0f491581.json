{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { Map, Marker } from 'react-amap';\nimport If from '@/components/if';\nimport { Star, Dots, FullScreen, FullScreenExit } from '@/components/svg';\nimport Button from '@/components/button';\nimport Popover from '@/components/popover';\nimport Loading from '@/components/loading';\nimport Card from '@/components/card';\nimport { Flex } from '@/components/container';\nimport Timeline from '@/components/timeline';\nimport Drawer from '@/components/drawer';\nimport moment from '@/utils/moment';\nimport { Context } from '@/utils/global';\nimport shadowStyles from '@/styles/shadow.less';\nconst key = '81533a71a4db0eb8107620d99b954d9d';\n\nclass TravelMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"context\", void 0);\n\n    _defineProperty(this, \"getZoom\", () => {\n      return typeof this.state.ins === 'undefined' ? 0 : this.state.ins.getZoom();\n    });\n\n    _defineProperty(this, \"getPos\", () => {\n      return typeof this.state.ins === 'undefined' ? {\n        P: 0,\n        Q: 0,\n        lng: 0,\n        lat: 0\n      } : this.state.ins.getCenter();\n    });\n\n    this.state = {\n      drawer: false,\n      full: false\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: this.state.full ? {\n        position: 'fixed',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        zIndex: 500,\n        overflow: 'hidden'\n      } : _objectSpread({\n        width: '100%',\n        height: '80vh',\n        overflow: 'hidden',\n        zIndex: 1,\n        position: 'relative'\n      }, this.props.style)\n    }, __jsx(Map, {\n      amapkey: key,\n      loading: __jsx(Loading, null),\n      mapStyle: this.context.theme === 'default' ? 'amap://styles/f5818203233e77c81d9a6555be54758a' : 'amap://styles/dark',\n      plugins: ['MapType', 'Scale', 'ToolBar'],\n      events: {\n        created: ins => {\n          this.setState({\n            ins\n          });\n          window.m = ins;\n          ins.setCity('中国');\n          if (!!this.props.onCreate) this.props.onCreate(ins);\n        }\n      }\n    }, __jsx(Button, {\n      icon: __jsx(Dots, null),\n      primary: true,\n      circle: true,\n      style: {\n        position: 'absolute',\n        left: '10px',\n        top: '10px'\n      },\n      onClick: () => this.setState(state => ({\n        drawer: !state.drawer\n      }))\n    }), __jsx(Button, {\n      icon: this.state.full ? __jsx(FullScreenExit, null) : __jsx(FullScreen, null),\n      circle: true,\n      style: {\n        position: 'absolute',\n        right: '60px',\n        bottom: '30px'\n      },\n      onClick: () => this.setState(state => ({\n        full: !state.full\n      }))\n    }), __jsx(Drawer, {\n      onClose: () => this.setState({\n        drawer: false\n      }),\n      show: this.state.drawer,\n      placement: \"left\",\n      containerStyle: {\n        position: 'absolute'\n      },\n      style: {\n        width: '250px'\n      }\n    }, __jsx(Card, {\n      shadow: true,\n      style: {\n        background: 'var(--background)',\n        transition: 'background var(--transition-time)',\n        height: '100%',\n        overflow: 'auto'\n      }\n    }, __jsx(Timeline, {\n      data: this.props.cities.map(item => {\n        var result = [];\n        item.travels.map(i => result.push(_objectSpread(_objectSpread({}, item), i)));\n        return result;\n      }).reduce((a, b) => a.concat(b), []).sort((a, b) => a.time - b.time).map((item, idx) => ({\n        time: moment(item.time, 'X').format('YYYY-MM-DD'),\n        name: __jsx(React.Fragment, null, __jsx(\"a\", {\n          onClick: () => {\n            this.setState({\n              drawer: false\n            });\n            this.state.ins.setZoomAndCenter(item.zoom, [item.lng, item.lat]);\n          }\n        }, item.name), __jsx(If, {\n          condition: !!item.link\n        }, ' - ', __jsx(Link, {\n          href: \"/post/[url]\",\n          as: `/post/${item.link}`\n        }, __jsx(\"a\", null, \"\\u6E38\\u8BB0\"))))\n      }))\n    }))), this.props.cities.map(item => __jsx(Marker, {\n      position: {\n        longitude: item.lng,\n        latitude: item.lat\n      }\n    }, __jsx(Popover, {\n      placement: \"top\",\n      trigger: ['click', 'hover'],\n      popoverClass: shadowStyles.shadow,\n      popoverStyle: {\n        boxShadow: '5px 5px 30px var(--shadow)',\n        ['--popover-backgroud']: 'var(--background)'\n      },\n      getOffset: () => ({\n        top: document.documentElement.scrollTop\n      }),\n      component: __jsx(Card, {\n        style: {\n          background: 'var(--background)',\n          maxWidth: 200\n        }\n      }, __jsx(Flex, {\n        direction: \"TB\",\n        fullWidth: true\n      }, [__jsx(\"strong\", {\n        key: \"name\"\n      }, item.name), ...item.travels.sort((a, b) => a.time - b.time).map(c => __jsx(Flex, {\n        key: c.time\n      }, moment(c.time, 'X').format('YYYY-MM-DD'), __jsx(If, {\n        condition: !!c.link\n      }, __jsx(Link, {\n        href: \"/post/[url]\",\n        as: `/post/${c.link}`\n      }, __jsx(\"a\", null, \"\\u6E38\\u8BB0\")))))]))\n    }, __jsx(Star, {\n      style: (() => {\n        const color = this.context.theme === 'default' ? 'red' : 'yellow';\n        const filter = `drop-shadow(0px 0px 10px ${color})`;\n        return {\n          color,\n          filter\n        };\n      })()\n    }))))));\n  }\n\n}\n\n_defineProperty(TravelMap, \"contextType\", Context);\n\n_defineProperty(TravelMap, \"defaultProps\", {\n  cities: []\n});\n\nexport default TravelMap;","map":null,"metadata":{},"sourceType":"module"}