{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Body from './body';\nimport { concat } from '@/utils/component';\nimport { getOffsetTop, getOffsetLeft } from '@/utils/offset';\nimport styles from './popover.less';\nexport default function Popover(props) {\n  const {\n    placement = 'top',\n    trigger = ['hover'],\n    component,\n    className,\n    style,\n    popoverClass,\n    popoverStyle,\n    children,\n    getOffset = () => ({\n      top: 0,\n      left: 0\n    })\n  } = props;\n  const ref = React.useRef();\n  const childRef = React.useRef();\n  const [pos, setPos] = React.useState({});\n  const [show, setShow] = React.useState(false);\n  const getPosition = React.useCallback(() => {\n    const {\n      top = 0,\n      left = 0\n    } = getOffset();\n    return {\n      top: top + (placement === 'top' ? getOffsetTop(ref.current) - childRef.current.offsetHeight - 10 : placement === 'bottom' ? getOffsetTop(ref.current) + ref.current.offsetHeight + 10 : getOffsetTop(ref.current) - (childRef.current.offsetHeight - ref.current.offsetHeight) / 2),\n      left: left + (placement === 'left' ? getOffsetLeft(ref.current) - childRef.current.offsetWidth - 10 : placement === 'right' ? getOffsetLeft(ref.current) + ref.current.offsetWidth + 10 : getOffsetLeft(ref.current) - childRef.current.offsetWidth / 2 + ref.current.offsetWidth / 2)\n    };\n  }, [ref]);\n  var classList = [styles.popover, styles[placement], popoverClass];\n  if (show) classList.push(styles.show);\n  const click = React.useMemo(() => trigger.indexOf('click') !== -1, [trigger]);\n  const hover = React.useMemo(() => trigger.indexOf('hover') !== -1, [trigger]);\n\n  const moveIn = () => {\n    if (!show) setPos(getPosition());\n    setShow(true);\n  };\n\n  const moveOut = () => {\n    setPos({});\n    setShow(false);\n  };\n\n  return __jsx(\"div\", {\n    ref: ref,\n    className: className,\n    style: style,\n    onClick: () => {\n      if (click) moveIn();\n    },\n    onMouseEnter: () => {\n      if (hover) moveIn();\n    },\n    onMouseLeave: moveOut\n  }, __jsx(Body, null, __jsx(\"div\", {\n    ref: childRef,\n    className: concat(...classList),\n    style: _objectSpread(_objectSpread({}, pos), popoverStyle),\n    onMouseEnter: moveIn,\n    onMouseLeave: moveOut\n  }, component)), children);\n}","map":null,"metadata":{},"sourceType":"module"}