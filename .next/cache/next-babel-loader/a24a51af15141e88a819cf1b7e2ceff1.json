{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport { Left } from '@/components/svg';\nimport Button from '@/components/button';\nimport { concat } from '@/utils/component';\nimport { Context } from '@/utils/global';\nimport { scrollAnimation } from '@/utils/scroll';\nimport styles from './anchor.less';\nimport shadowStyles from '@/styles/shadow.less';\nexport default function Anchor(props) {\n  var content = props.content,\n      className = props.className,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 10 : _props$indent,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 275 : _props$width,\n      _props$suffixAnchors = props.suffixAnchors,\n      suffixAnchor = _props$suffixAnchors === void 0 ? [] : _props$suffixAnchors,\n      container = props.container,\n      _props$emptyText = props.emptyText,\n      emptyText = _props$emptyText === void 0 ? '没有标题' : _props$emptyText,\n      restProps = _objectWithoutProperties(props, [\"content\", \"className\", \"indent\", \"width\", \"suffixAnchors\", \"container\", \"emptyText\"]);\n\n  var ref = React.useRef();\n  var context = React.useContext(Context);\n  var anchors = React.useMemo(function () {\n    return findAnchors(content).concat(suffixAnchor);\n  }, [content, suffixAnchor]);\n\n  var _React$useState = React.useState(context.big_screen),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      show = _React$useState2[0],\n      setShow = _React$useState2[1];\n\n  var syncScroll = React.useCallback(function (e) {\n    var target = e.target === document ? document.documentElement : e.target; // 同步浮框位置\n    //   if (!!ref.current) ref.current.style.top = `${target.scrollTop + 100}px`;\n    // 获取当前阅读进度\n\n    var scrollTop = target.scrollTop;\n\n    for (var i = 0; i < anchors.length; i++) {\n      var el = document.getElementById(anchors[i].id);\n\n      if (!!el && el.offsetTop > scrollTop) {\n        // 清除老的状态\n        var lastActive = ref.current.getElementsByClassName(styles.active);\n\n        for (var j = 0; j < lastActive.length; j++) {\n          if (lastActive[j].id !== \"anchor-\".concat(anchors[i].id)) {\n            lastActive[j].classList.remove(styles.active);\n          }\n        } // 设置新的状态\n\n\n        var anchorsEls = ref.current.getElementsByTagName('a');\n        var nowEl = anchorsEls[i];\n        nowEl.classList.add(styles.active); // 将对应的连接移入视窗中\n\n        var linksEls = ref.current.getElementsByClassName(styles.links);\n        var linkEl = linksEls.length > 0 ? linksEls[0] : undefined;\n        if (!linkEl) break;\n        var nowTop = nowEl.offsetTop;\n        var nowHeight = nowEl.offsetHeight;\n        if (nowTop < linkEl.scrollTop) scrollAnimation(linkEl, nowTop);else if (nowTop + nowHeight > linkEl.scrollTop + linkEl.clientHeight) scrollAnimation(linkEl, nowTop - linkEl.clientHeight + nowHeight);\n        break;\n      }\n    }\n  }, [ref]);\n  React.useEffect(function () {\n    var c = !!container ? container : document;\n\n    if (!!c) {\n      c.addEventListener('scroll', syncScroll);\n      return function () {\n        return c.removeEventListener('scroll', syncScroll);\n      };\n    }\n  }, [container, syncScroll]);\n  return __jsx(\"div\", _extends({\n    ref: ref\n  }, restProps, {\n    className: concat(styles.anchor, show ? styles.show : '', className)\n  }), __jsx(Button, {\n    neumorphism: true,\n    className: concat(styles.button),\n    icon: __jsx(Left, {\n      className: styles.icon\n    }),\n    onClick: function onClick() {\n      return setShow(!show);\n    }\n  }), __jsx(Flex, {\n    direction: \"TB\",\n    subAxis: \"flex-start\",\n    wrap: false,\n    className: concat(styles.links, shadowStyles.neumorphism)\n  }, !!anchors && anchors.length > 0 ? anchors.map(function (item) {\n    return __jsx(\"a\", {\n      key: item.id,\n      id: \"anchor-\".concat(item.id),\n      href: \"#\".concat(item.id),\n      style: {\n        paddingLeft: (item.level - 1) * indent\n      },\n      title: item.name,\n      onClick: function onClick(e) {\n        var el = document.getElementById(item.id);\n        if (!!el) scrollAnimation(!!container ? container : document.documentElement, el.getBoundingClientRect().top + window.pageYOffset);\n        e.preventDefault();\n        return false;\n      }\n    }, item.name);\n  }) : emptyText));\n}\nexport function findAnchors(html) {\n  var re = new RegExp(\"<h([1-6]) id=\\\"(.*)\\\">(.*)</h\\\\1>\", 'g');\n  var result_list = [];\n\n  do {\n    var result = re.exec(html);\n\n    if (result !== null) {\n      result_list.push({\n        id: \"\".concat(result[2]),\n        name: result[3],\n        level: parseInt(result[1])\n      });\n    }\n  } while (result);\n\n  return result_list;\n}","map":null,"metadata":{},"sourceType":"module"}