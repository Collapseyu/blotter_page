{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport styles from './button.less';\nimport shadowStyles from '@/styles/shadow.less';\n\nfunction parseProps(props) {\n  const {\n    size = 'middle',\n    icon,\n    circle = false,\n    primary = false,\n    shadow = false,\n    neumorphism = false,\n    disabled = false,\n    clicked = false,\n    onClick,\n    style = {},\n    className,\n    children\n  } = props;\n  var classList = [styles.button, className];\n\n  if (typeof size === 'string') {\n    classList.push(styles[size]);\n  } else {\n    style.fontSize = `${size}em`;\n    style.width = `${size + 1}em`;\n    style.height = `${size + 1}em`;\n  }\n\n  if (!!icon) classList.push(styles.icon);\n  if (circle) classList.push(styles.circle);\n  if (primary) classList.push(styles.primary);\n  if (shadow) classList.push(shadowStyles.shadow);\n  if (neumorphism && !clicked) classList.push(shadowStyles.neumorphism);\n  if (neumorphism && clicked) classList.push(shadowStyles.neumorphism_inset);\n  if (disabled) classList.push('disabled');\n  if ((shadow || neumorphism) && !disabled) classList.push(shadowStyles.clickable);\n  return {\n    classList,\n    style,\n    onClick: disabled ? () => {} : onClick,\n    icon,\n    children,\n    disabled\n  };\n}\n\nfunction Button(props, ref) {\n  const {\n    classList,\n    style,\n    onClick,\n    icon,\n    children,\n    disabled\n  } = parseProps(props);\n  return __jsx(\"button\", {\n    className: concat(...classList),\n    style: style,\n    onClick: onClick,\n    disabled: disabled\n  }, !!icon ? icon : children);\n}\n\nfunction ALink(props, ref) {\n  const {\n    classList,\n    style,\n    onClick,\n    icon,\n    children,\n    disabled\n  } = parseProps(props);\n  const {\n    href,\n    target,\n    rel,\n    linkType\n  } = props;\n  return __jsx(\"a\", {\n    ref: ref,\n    className: concat(...classList),\n    style: style,\n    onClick: onClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type: linkType\n  }, !!icon ? icon : children);\n} // Next.js 的 Link  组件需要子组件可以接收 ref（用于修i该子元素的 href）\n\n\nexport default React.forwardRef(Button);\nexport const A = React.forwardRef(ALink);","map":null,"metadata":{},"sourceType":"module"}