{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Edit } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport { waitUntil } from '@/utils/debounce';\nimport randomString from '@/utils/random';\nimport shadowStyles from '@/styles/shadow.less';\nimport styles from './textarea.less';\nexport default function TextArea(props) {\n  var defaultValue = props.defaultValue,\n      value = props.value,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'middle' : _props$size,\n      _props$label = props.label,\n      label = _props$label === void 0 ? '' : _props$label,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$lablePlacement = props.lablePlacement,\n      lablePlacement = _props$lablePlacement === void 0 ? 'top' : _props$lablePlacement,\n      rows = props.rows,\n      _props$debounce = props.debounce,\n      debounce = _props$debounce === void 0 ? 200 : _props$debounce,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,\n      _props$getValueCallba = props.getValueCallback,\n      getValueCallback = _props$getValueCallba === void 0 ? function () {} : _props$getValueCallba,\n      _props$setValueCallba = props.setValueCallback,\n      setValueCallback = _props$setValueCallba === void 0 ? function () {} : _props$setValueCallba,\n      _onBlur = props.onBlur,\n      hint = props.hint,\n      style = props.style,\n      className = props.className,\n      _props$transform = props.transform,\n      transform = _props$transform === void 0 ? false : _props$transform;\n  var ref = React.useRef();\n  var key = React.useMemo(function () {\n    return randomString();\n  }, []);\n  React.useEffect(function () {\n    return getValueCallback(function () {\n      return ref.current.value;\n    });\n  }, [ref, getValueCallback]);\n  React.useEffect(function () {\n    return setValueCallback(function (value) {\n      return ref.current.value = value;\n    });\n  }, [ref, setValueCallback]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showInput = _React$useState2[0],\n      setShowInput = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (!!ref.current && !!value) ref.current.value = value;\n  }, [value, showInput]);\n  var onInputChange = React.useCallback(function (e) {\n    var value = e.target.value;\n\n    var cb = function cb() {\n      // setState(value);\n      onChange(value);\n    };\n\n    if (debounce > 0) waitUntil(key, cb, debounce);else cb();\n  }, [debounce, onChange]);\n  return __jsx(\"div\", {\n    className: concat(styles.wrapper, className, styles[size], styles[lablePlacement]),\n    style: style,\n    onBlur: function onBlur() {\n      if (transform) setShowInput(false);\n      if (!!_onBlur) _onBlur();\n    },\n    onClick: function onClick() {\n      if (transform) setShowInput(true);\n    }\n  }, !transform || transform && showInput ? __jsx(React.Fragment, null, !!label ? __jsx(\"div\", {\n    className: styles.label\n  }, label) : null, __jsx(\"div\", {\n    className: concat.apply(void 0, [styles.inner].concat(_toConsumableArray(disabled ? ['disabled'] : [])))\n  }, __jsx(\"div\", {\n    className: concat(styles.textarea, shadowStyles.neumorphism_inset)\n  }, __jsx(\"textarea\", {\n    ref: ref,\n    defaultValue: defaultValue,\n    onChange: onInputChange,\n    placeholder: placeholder,\n    readOnly: !editable,\n    autoFocus: autoFocus,\n    rows: rows\n  })), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null)) : __jsx(\"div\", {\n    className: styles.transform\n  }, __jsx(\"span\", {\n    className: styles.transform_value\n  }, value), __jsx(\"span\", {\n    className: styles.transform_icon\n  }, __jsx(Edit, null))));\n}","map":null,"metadata":{},"sourceType":"module"}