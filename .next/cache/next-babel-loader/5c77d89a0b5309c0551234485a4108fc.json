{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Success } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport styles from './checkbox.module.scss';\nexport default function CheckBox(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var value = props.value,\n      _props$switchStyle = props.switchStyle,\n      switchStyle = _props$switchStyle === void 0 ? false : _props$switchStyle,\n      checkText = props.checkText,\n      uncheckText = props.uncheckText,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? typeof value === 'undefined' ? function (v) {\n    return setChecked(v);\n  } : function () {} : _props$onChange,\n      children = props.children,\n      _props$getValueCallba = props.getValueCallback,\n      getValueCallback = _props$getValueCallba === void 0 ? function () {} : _props$getValueCallba,\n      _props$setValueCallba = props.setValueCallback,\n      setValueCallback = _props$setValueCallba === void 0 ? function () {} : _props$setValueCallba,\n      hint = props.hint;\n  var isChecked = !!value || checked;\n  React.useEffect(function () {\n    return getValueCallback(function () {\n      return isChecked;\n    });\n  }, [getValueCallback]);\n  React.useEffect(function () {\n    return setValueCallback(setChecked);\n  }, [setValueCallback]);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: concat(switchStyle ? styles[\"switch\"] : styles.checkbox, isChecked ? styles.checked : ''),\n    onClick: function onClick() {\n      return onChange(!isChecked);\n    }\n  }, __jsx(\"div\", {\n    className: styles.icon\n  }, isChecked && !switchStyle ? __jsx(Success, null) : null), __jsx(\"div\", {\n    className: styles.text\n  }, isChecked && !!checkText ? checkText : !isChecked && !!uncheckText ? uncheckText : children)), !!hint ? __jsx(\"div\", {\n    className: styles.hint\n  }, hint) : null);\n}","map":null,"metadata":{},"sourceType":"module"}