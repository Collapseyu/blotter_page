{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function importImages(_x) {\n  return _importImages.apply(this, arguments);\n}\n\nfunction _importImages() {\n  _importImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(html) {\n    var reg, images, result, part, params, key, end, i, tmp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //   const html = await this.renderMarkdown(this.editor.getValue());\n            reg = new RegExp('<img ([^>]*)>', 'g');\n            images = [];\n\n            do {\n              result = reg.exec(html);\n\n              if (result !== null) {\n                part = result[1].split('=');\n                params = {};\n                key = '';\n                end = '';\n\n                for (i = 0; i < part.length; i++) {\n                  if (key === '') {\n                    key = part[i];\n                    end = part[i + 1][0];\n                  } else {\n                    tmp = part[i].split(end);\n                    params[key] = tmp[1];\n                    key = tmp[2].trim();\n                  }\n                }\n\n                if (!!params['src']) {\n                  if (!!params['alt'] || !!params['title']) images.push(\"\".concat(params['src'], \"#\").concat(!!params['title'] ? params['title'] : params['alt']));else images.push(params['src']);\n                }\n              }\n            } while (result);\n\n            return _context.abrupt(\"return\", images);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _importImages.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}