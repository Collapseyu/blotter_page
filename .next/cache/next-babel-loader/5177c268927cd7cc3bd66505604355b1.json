{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Body from './body';\nimport { concat } from '@/utils/component';\nimport { getOffsetTop, getOffsetLeft } from '@/utils/offset';\nimport styles from './popover.less';\nexport default function Popover(props) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'top' : _props$placement,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? ['hover'] : _props$trigger,\n      component = props.component,\n      className = props.className,\n      style = props.style,\n      popoverClass = props.popoverClass,\n      popoverStyle = props.popoverStyle,\n      children = props.children,\n      _props$getOffset = props.getOffset,\n      getOffset = _props$getOffset === void 0 ? function () {\n    return {\n      top: 0,\n      left: 0\n    };\n  } : _props$getOffset;\n  var ref = React.useRef();\n  var childRef = React.useRef();\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pos = _React$useState2[0],\n      setPos = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      show = _React$useState4[0],\n      setShow = _React$useState4[1];\n\n  var getPosition = React.useCallback(function () {\n    var _getOffset = getOffset(),\n        _getOffset$top = _getOffset.top,\n        top = _getOffset$top === void 0 ? 0 : _getOffset$top,\n        _getOffset$left = _getOffset.left,\n        left = _getOffset$left === void 0 ? 0 : _getOffset$left;\n\n    return {\n      top: top + (placement === 'top' ? getOffsetTop(ref.current) - childRef.current.offsetHeight - 10 : placement === 'bottom' ? getOffsetTop(ref.current) + ref.current.offsetHeight + 10 : getOffsetTop(ref.current) - (childRef.current.offsetHeight - ref.current.offsetHeight) / 2),\n      left: left + (placement === 'left' ? getOffsetLeft(ref.current) - childRef.current.offsetWidth - 10 : placement === 'right' ? getOffsetLeft(ref.current) + ref.current.offsetWidth + 10 : getOffsetLeft(ref.current) - childRef.current.offsetWidth / 2 + ref.current.offsetWidth / 2)\n    };\n  }, [ref]);\n  var classList = [styles.popover, styles[placement], popoverClass];\n  if (show) classList.push(styles.show);\n  var click = React.useMemo(function () {\n    return trigger.indexOf('click') !== -1;\n  }, [trigger]);\n  var hover = React.useMemo(function () {\n    return trigger.indexOf('hover') !== -1;\n  }, [trigger]);\n\n  var moveIn = function moveIn() {\n    if (!show) setPos(getPosition());\n    setShow(true);\n  };\n\n  var moveOut = function moveOut() {\n    setPos({});\n    setShow(false);\n  };\n\n  return __jsx(\"div\", {\n    ref: ref,\n    className: className,\n    style: style,\n    onClick: function onClick() {\n      if (click) moveIn();\n    },\n    onMouseEnter: function onMouseEnter() {\n      if (hover) moveIn();\n    },\n    onMouseLeave: moveOut\n  }, __jsx(Body, null, __jsx(\"div\", {\n    ref: childRef,\n    className: concat.apply(void 0, classList),\n    style: _objectSpread(_objectSpread({}, pos), popoverStyle),\n    onMouseEnter: moveIn,\n    onMouseLeave: moveOut\n  }, component)), children);\n}","map":null,"metadata":{},"sourceType":"module"}