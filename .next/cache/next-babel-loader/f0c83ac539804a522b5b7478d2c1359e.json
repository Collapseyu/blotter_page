{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { concat } from '@/utils/component';\nimport Popover from '../popover';\nimport styles from './tooltip.module.scss';\nimport textStyles from '@/styles/text.module.scss';\nexport default function Tooltip(props) {\n  const {\n    ellipsis = false,\n    className,\n    style,\n    children,\n    title = children.toString()\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"ellipsis\", \"className\", \"style\", \"children\", \"title\"]);\n\n  var classList = [className];\n  if (ellipsis) classList.push(textStyles.ellipsis);\n  return __jsx(Popover, _extends({\n    component: title,\n    className: concat(...classList),\n    style: style,\n    popoverClass: styles.tooltip\n  }, restProps), children);\n}","map":null,"metadata":{},"sourceType":"module"}