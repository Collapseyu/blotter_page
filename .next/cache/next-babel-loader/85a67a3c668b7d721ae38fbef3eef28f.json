{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Flex } from '@/components/container';\nimport { Body } from '@/components/popover';\nimport { Close } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport styles from './notification.module.scss';\nimport shadowStyles from '@/styles/shadow.module.scss';\n\nfunction Notification(props) {\n  var _props$alertType = props.alertType,\n      alertType = _props$alertType === void 0 ? 'info' : _props$alertType,\n      icon = props.icon,\n      title = props.title,\n      content = props.content,\n      className = props.className,\n      onClose = props.onClose,\n      _props$shadow = props.shadow,\n      shadow = _props$shadow === void 0 ? false : _props$shadow,\n      restProps = _objectWithoutProperties(props, [\"alertType\", \"icon\", \"title\", \"content\", \"className\", \"onClose\", \"shadow\"]);\n\n  return __jsx(Flex, _extends({}, restProps, {\n    className: concat(styles.notification, styles[alertType], className, shadow ? shadowStyles.shadow : ''),\n    wrap: false,\n    subAxis: \"flex-start\"\n  }), icon && __jsx(Flex.Item, {\n    style: {\n      flex: '0 0 5em'\n    }\n  }, __jsx(\"div\", {\n    className: styles.icon\n  }, icon)), __jsx(Flex.Item, {\n    style: {\n      flex: '1 1 auto'\n    }\n  }, __jsx(Flex, {\n    direction: \"TB\",\n    fullWidth: true\n  }, title && __jsx(\"div\", {\n    className: styles.title\n  }, title, \" \", !!onClose && __jsx(Close, {\n    style: {\n      \"float\": 'right'\n    },\n    onClick: onClose\n  })), content && __jsx(\"div\", {\n    className: styles.content\n  }, content))));\n} // 右上角的提醒，当存在多个提醒时，需要对应排序，因此需要向页面内插入一个元素。为了后续重用，该部分不需要 remove\n\n\nvar id = 0;\nvar messages;\nvar update;\n\nfunction addMessage(props) {\n  if (id === 0) {\n    update = Body.Insert(function () {\n      return __jsx(\"div\", null);\n    }).update;\n    messages = [];\n  }\n\n  id += 1;\n\n  var np = _objectSpread(_objectSpread({\n    autoClose: 5000,\n    shadow: true\n  }, props), {}, {\n    onClose: function onClose() {\n      removeMessage(np._id);\n      if (!!props.onClose) props.onClose();\n    },\n    _id: id\n  });\n\n  messages.push(np);\n  update(__jsx(Messages, {\n    messages: messages\n  }));\n\n  if (np.autoClose > 0) {\n    setTimeout(function () {\n      removeMessage(np._id);\n    }, np.autoClose);\n  }\n}\n\nfunction removeMessage(id) {\n  messages = messages.filter(function (p) {\n    return p._id !== id;\n  });\n  update(__jsx(Messages, {\n    messages: messages\n  }));\n}\n\nfunction Messages(props) {\n  var messages = props.messages;\n  return __jsx(Flex, {\n    direction: \"TB\",\n    style: {\n      position: 'fixed',\n      top: 20,\n      right: 20,\n      width: '300px',\n      zIndex: 2\n    },\n    itemStyle: {\n      width: '100%'\n    }\n  }, messages.map(function (p, i) {\n    var autoClose = p.autoClose,\n        _id = p._id,\n        restProps = _objectWithoutProperties(p, [\"autoClose\", \"_id\"]);\n\n    return __jsx(Notification, _extends({\n      key: i\n    }, restProps));\n  }));\n}\n\nexport function message(props) {\n  addMessage(props);\n}\nexport default Object.assign(Notification, {\n  message: message\n});","map":null,"metadata":{},"sourceType":"module"}