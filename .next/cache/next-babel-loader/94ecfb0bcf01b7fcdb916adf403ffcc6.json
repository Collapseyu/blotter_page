{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport Avatar from '@/components/avatar';\nimport { Flex } from '@/components/container';\nimport { Close } from '@/components/svg';\nimport { concat } from '@/utils/component';\nimport { parseColor, toHex, rgb2hsl, hsl2rgb } from '@/utils/color';\nimport styles from './tag.module.scss';\nimport textStyles from '@/styles/text.module.scss';\nimport shadowStyles from '@/styles/shadow.module.scss'; // function getFrontColor(backgroundColor) {\n//   /*\n//         根据背景色计算前景色\n//         首先根据解析出三原色，判断是浅色还是深色，而后将这些颜色朝另一个方向按比例移动\n//         浅色背景 xx = x - 3 * fixValue * x / (r + g + b)\n//                 xx = (1 - 3 * fixValue / (r + g + b)) * x\n//         深色背景 xx = x + 3 * fixValue * (255 - x) / (255 * 3 - (r + g + b))\n//                 xx = (1 - 3 * fixValue / (255 * 3 - (r + g + b)) * x + 3 * fixValue * 255 / (255 * 3 - (r + g + b))\n//     */\n//   const [r, g, b] = parseColor(backgroundColor);\n//   const total = r + g + b;\n//   const fixValue = (Math.pow(127 - Math.min(total / 3, 255 - total / 3) / 127, 4) + 1) * 127;\n//   // y = ax + b\n//   const _a = total / 3 > 127 ? 1 - (3 * fixValue) / total : 1 - (3 * fixValue) / (255 * 3 - total);\n//   const _b = total / 3 > 127 ? 0 : (3 * fixValue * 255) / (255 * 3 - total);\n//   const rr = _a * r + _b;\n//   const gg = _a * g + _b;\n//   const bb = _a * b + _b;\n//   return `#${toHex(rr)}${toHex(gg)}${toHex(bb)}`;\n// }\n\nfunction getFrontColor(backgroundColor) {\n  var _parseColor = parseColor(backgroundColor),\n      _parseColor2 = _slicedToArray(_parseColor, 3),\n      r = _parseColor2[0],\n      g = _parseColor2[1],\n      b = _parseColor2[2];\n\n  var _rgb2hsl = rgb2hsl(r, g, b),\n      _rgb2hsl2 = _slicedToArray(_rgb2hsl, 3),\n      h = _rgb2hsl2[0],\n      s = _rgb2hsl2[1],\n      l = _rgb2hsl2[2];\n\n  var hh = h;\n  var ss = 100;\n  var ll = l > 50 ? l - 50 : l <= 25 ? 100 - l : s > 50 ? 100 : l + 50;\n\n  var _hsl2rgb = hsl2rgb(hh, ss, ll),\n      _hsl2rgb2 = _slicedToArray(_hsl2rgb, 3),\n      rr = _hsl2rgb2[0],\n      gg = _hsl2rgb2[1],\n      bb = _hsl2rgb2[2];\n\n  return \"#\".concat(toHex(rr)).concat(toHex(gg)).concat(toHex(bb));\n}\n\nexport default function Tag(props) {\n  var tag = props.tag,\n      onClose = props.onClose,\n      className = props.className,\n      style = props.style;\n  return __jsx(Flex, {\n    className: concat(styles.tag, className, shadowStyles.neumorphism_light, shadowStyles.clickable, textStyles.color),\n    style: _objectSpread(_objectSpread({}, !!tag.color ? {\n      background: tag.color,\n      color: getFrontColor(tag.color)\n    } : {}), style),\n    mainAxis: \"space-around\",\n    mainSize: \"small\",\n    wrap: false\n  }, __jsx(Link, {\n    href: '/tag/[tag]',\n    as: \"/tag/\".concat(tag[\"short\"])\n  }, __jsx(\"a\", null, __jsx(Flex, {\n    className: concat(textStyles.color),\n    wrap: false,\n    mainAxis: \"space-between\",\n    mainSize: \"small\",\n    style: _objectSpread({}, !!tag.color ? {\n      color: getFrontColor(tag.color)\n    } : {})\n  }, tag.icon ? __jsx(Avatar, {\n    src: tag.icon,\n    style: {\n      fontSize: '0.75em',\n      background: 'white'\n    }\n  }) : null, tag.name))), !!onClose && __jsx(Close, {\n    onClick: onClose,\n    style: {\n      background: 'transparent',\n      color: 'currentColor'\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}